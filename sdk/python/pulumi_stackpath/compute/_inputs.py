# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'NetworkPolicyEgressArgs',
    'NetworkPolicyEgressProtocolArgs',
    'NetworkPolicyEgressProtocolAhArgs',
    'NetworkPolicyEgressProtocolEspArgs',
    'NetworkPolicyEgressProtocolGreArgs',
    'NetworkPolicyEgressProtocolIcmpArgs',
    'NetworkPolicyEgressProtocolTcpArgs',
    'NetworkPolicyEgressProtocolTcpUdpArgs',
    'NetworkPolicyEgressProtocolUdpArgs',
    'NetworkPolicyEgressToArgs',
    'NetworkPolicyEgressToInstanceSelectorArgs',
    'NetworkPolicyEgressToIpBlockArgs',
    'NetworkPolicyEgressToNetworkSelectorArgs',
    'NetworkPolicyIngressArgs',
    'NetworkPolicyIngressFromArgs',
    'NetworkPolicyIngressFromInstanceSelectorArgs',
    'NetworkPolicyIngressFromIpBlockArgs',
    'NetworkPolicyIngressFromNetworkSelectorArgs',
    'NetworkPolicyIngressProtocolArgs',
    'NetworkPolicyIngressProtocolAhArgs',
    'NetworkPolicyIngressProtocolEspArgs',
    'NetworkPolicyIngressProtocolGreArgs',
    'NetworkPolicyIngressProtocolIcmpArgs',
    'NetworkPolicyIngressProtocolTcpArgs',
    'NetworkPolicyIngressProtocolTcpUdpArgs',
    'NetworkPolicyIngressProtocolUdpArgs',
    'NetworkPolicyInstanceSelectorArgs',
    'NetworkPolicyNetworkSelectorArgs',
    'NetworkRouteGatewaySelectorArgs',
    'NetworkRouteGatewaySelectorInterfaceSelectorArgs',
    'WorkloadContainerArgs',
    'WorkloadContainerEnvArgs',
    'WorkloadContainerLivenessProbeArgs',
    'WorkloadContainerLivenessProbeHttpGetArgs',
    'WorkloadContainerLivenessProbeTcpSocketArgs',
    'WorkloadContainerPortArgs',
    'WorkloadContainerReadinessProbeArgs',
    'WorkloadContainerReadinessProbeHttpGetArgs',
    'WorkloadContainerReadinessProbeTcpSocketArgs',
    'WorkloadContainerResourcesArgs',
    'WorkloadContainerVolumeMountArgs',
    'WorkloadImagePullCredentialArgs',
    'WorkloadImagePullCredentialDockerRegistryArgs',
    'WorkloadInstanceArgs',
    'WorkloadInstanceContainerArgs',
    'WorkloadInstanceContainerEnvArgs',
    'WorkloadInstanceContainerLivenessProbeArgs',
    'WorkloadInstanceContainerLivenessProbeHttpGetArgs',
    'WorkloadInstanceContainerLivenessProbeTcpSocketArgs',
    'WorkloadInstanceContainerPortArgs',
    'WorkloadInstanceContainerReadinessProbeArgs',
    'WorkloadInstanceContainerReadinessProbeHttpGetArgs',
    'WorkloadInstanceContainerReadinessProbeTcpSocketArgs',
    'WorkloadInstanceContainerResourcesArgs',
    'WorkloadInstanceContainerVolumeMountArgs',
    'WorkloadInstanceLocationArgs',
    'WorkloadInstanceMetadataArgs',
    'WorkloadInstanceNetworkInterfaceArgs',
    'WorkloadInstanceVirtualMachineArgs',
    'WorkloadInstanceVirtualMachineLivenessProbeArgs',
    'WorkloadInstanceVirtualMachineLivenessProbeHttpGetArgs',
    'WorkloadInstanceVirtualMachineLivenessProbeTcpSocketArgs',
    'WorkloadInstanceVirtualMachinePortArgs',
    'WorkloadInstanceVirtualMachineReadinessProbeArgs',
    'WorkloadInstanceVirtualMachineReadinessProbeHttpGetArgs',
    'WorkloadInstanceVirtualMachineReadinessProbeTcpSocketArgs',
    'WorkloadInstanceVirtualMachineResourcesArgs',
    'WorkloadInstanceVirtualMachineVolumeMountArgs',
    'WorkloadNetworkInterfaceArgs',
    'WorkloadTargetArgs',
    'WorkloadTargetScaleSettingsArgs',
    'WorkloadTargetScaleSettingsMetricArgs',
    'WorkloadTargetSelectorArgs',
    'WorkloadVirtualMachineArgs',
    'WorkloadVirtualMachineLivenessProbeArgs',
    'WorkloadVirtualMachineLivenessProbeHttpGetArgs',
    'WorkloadVirtualMachineLivenessProbeTcpSocketArgs',
    'WorkloadVirtualMachinePortArgs',
    'WorkloadVirtualMachineReadinessProbeArgs',
    'WorkloadVirtualMachineReadinessProbeHttpGetArgs',
    'WorkloadVirtualMachineReadinessProbeTcpSocketArgs',
    'WorkloadVirtualMachineResourcesArgs',
    'WorkloadVirtualMachineVolumeMountArgs',
    'WorkloadVolumeClaimArgs',
    'WorkloadVolumeClaimResourcesArgs',
]

@pulumi.input_type
class NetworkPolicyEgressArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input['NetworkPolicyEgressProtocolArgs']] = None,
                 to: Optional[pulumi.Input['NetworkPolicyEgressToArgs']] = None):
        pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input['NetworkPolicyEgressProtocolArgs']]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input['NetworkPolicyEgressProtocolArgs']]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input['NetworkPolicyEgressToArgs']]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input['NetworkPolicyEgressToArgs']]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class NetworkPolicyEgressProtocolArgs:
    def __init__(__self__, *,
                 ah: Optional[pulumi.Input['NetworkPolicyEgressProtocolAhArgs']] = None,
                 esp: Optional[pulumi.Input['NetworkPolicyEgressProtocolEspArgs']] = None,
                 gre: Optional[pulumi.Input['NetworkPolicyEgressProtocolGreArgs']] = None,
                 icmp: Optional[pulumi.Input['NetworkPolicyEgressProtocolIcmpArgs']] = None,
                 tcp: Optional[pulumi.Input['NetworkPolicyEgressProtocolTcpArgs']] = None,
                 tcp_udp: Optional[pulumi.Input['NetworkPolicyEgressProtocolTcpUdpArgs']] = None,
                 udp: Optional[pulumi.Input['NetworkPolicyEgressProtocolUdpArgs']] = None):
        if ah is not None:
            pulumi.set(__self__, "ah", ah)
        if esp is not None:
            pulumi.set(__self__, "esp", esp)
        if gre is not None:
            pulumi.set(__self__, "gre", gre)
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if tcp_udp is not None:
            pulumi.set(__self__, "tcp_udp", tcp_udp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def ah(self) -> Optional[pulumi.Input['NetworkPolicyEgressProtocolAhArgs']]:
        return pulumi.get(self, "ah")

    @ah.setter
    def ah(self, value: Optional[pulumi.Input['NetworkPolicyEgressProtocolAhArgs']]):
        pulumi.set(self, "ah", value)

    @property
    @pulumi.getter
    def esp(self) -> Optional[pulumi.Input['NetworkPolicyEgressProtocolEspArgs']]:
        return pulumi.get(self, "esp")

    @esp.setter
    def esp(self, value: Optional[pulumi.Input['NetworkPolicyEgressProtocolEspArgs']]):
        pulumi.set(self, "esp", value)

    @property
    @pulumi.getter
    def gre(self) -> Optional[pulumi.Input['NetworkPolicyEgressProtocolGreArgs']]:
        return pulumi.get(self, "gre")

    @gre.setter
    def gre(self, value: Optional[pulumi.Input['NetworkPolicyEgressProtocolGreArgs']]):
        pulumi.set(self, "gre", value)

    @property
    @pulumi.getter
    def icmp(self) -> Optional[pulumi.Input['NetworkPolicyEgressProtocolIcmpArgs']]:
        return pulumi.get(self, "icmp")

    @icmp.setter
    def icmp(self, value: Optional[pulumi.Input['NetworkPolicyEgressProtocolIcmpArgs']]):
        pulumi.set(self, "icmp", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['NetworkPolicyEgressProtocolTcpArgs']]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['NetworkPolicyEgressProtocolTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @property
    @pulumi.getter(name="tcpUdp")
    def tcp_udp(self) -> Optional[pulumi.Input['NetworkPolicyEgressProtocolTcpUdpArgs']]:
        return pulumi.get(self, "tcp_udp")

    @tcp_udp.setter
    def tcp_udp(self, value: Optional[pulumi.Input['NetworkPolicyEgressProtocolTcpUdpArgs']]):
        pulumi.set(self, "tcp_udp", value)

    @property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['NetworkPolicyEgressProtocolUdpArgs']]:
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['NetworkPolicyEgressProtocolUdpArgs']]):
        pulumi.set(self, "udp", value)


@pulumi.input_type
class NetworkPolicyEgressProtocolAhArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NetworkPolicyEgressProtocolEspArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NetworkPolicyEgressProtocolGreArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NetworkPolicyEgressProtocolIcmpArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NetworkPolicyEgressProtocolTcpArgs:
    def __init__(__self__, *,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ports", value)


@pulumi.input_type
class NetworkPolicyEgressProtocolTcpUdpArgs:
    def __init__(__self__, *,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ports", value)


@pulumi.input_type
class NetworkPolicyEgressProtocolUdpArgs:
    def __init__(__self__, *,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ports", value)


@pulumi.input_type
class NetworkPolicyEgressToArgs:
    def __init__(__self__, *,
                 instance_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToInstanceSelectorArgs']]]] = None,
                 ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToIpBlockArgs']]]] = None,
                 network_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToNetworkSelectorArgs']]]] = None):
        if instance_selectors is not None:
            pulumi.set(__self__, "instance_selectors", instance_selectors)
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)
        if network_selectors is not None:
            pulumi.set(__self__, "network_selectors", network_selectors)

    @property
    @pulumi.getter(name="instanceSelectors")
    def instance_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToInstanceSelectorArgs']]]]:
        return pulumi.get(self, "instance_selectors")

    @instance_selectors.setter
    def instance_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToInstanceSelectorArgs']]]]):
        pulumi.set(self, "instance_selectors", value)

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToIpBlockArgs']]]]:
        return pulumi.get(self, "ip_blocks")

    @ip_blocks.setter
    def ip_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToIpBlockArgs']]]]):
        pulumi.set(self, "ip_blocks", value)

    @property
    @pulumi.getter(name="networkSelectors")
    def network_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToNetworkSelectorArgs']]]]:
        return pulumi.get(self, "network_selectors")

    @network_selectors.setter
    def network_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressToNetworkSelectorArgs']]]]):
        pulumi.set(self, "network_selectors", value)


@pulumi.input_type
class NetworkPolicyEgressToInstanceSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class NetworkPolicyEgressToIpBlockArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 excepts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "cidr", cidr)
        if excepts is not None:
            pulumi.set(__self__, "excepts", excepts)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def excepts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excepts")

    @excepts.setter
    def excepts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excepts", value)


@pulumi.input_type
class NetworkPolicyEgressToNetworkSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class NetworkPolicyIngressArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 from_: Optional[pulumi.Input['NetworkPolicyIngressFromArgs']] = None,
                 protocol: Optional[pulumi.Input['NetworkPolicyIngressProtocolArgs']] = None):
        pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input['NetworkPolicyIngressFromArgs']]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input['NetworkPolicyIngressFromArgs']]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input['NetworkPolicyIngressProtocolArgs']]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input['NetworkPolicyIngressProtocolArgs']]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class NetworkPolicyIngressFromArgs:
    def __init__(__self__, *,
                 instance_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromInstanceSelectorArgs']]]] = None,
                 ip_blocks: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromIpBlockArgs']]]] = None,
                 network_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromNetworkSelectorArgs']]]] = None):
        if instance_selectors is not None:
            pulumi.set(__self__, "instance_selectors", instance_selectors)
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)
        if network_selectors is not None:
            pulumi.set(__self__, "network_selectors", network_selectors)

    @property
    @pulumi.getter(name="instanceSelectors")
    def instance_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromInstanceSelectorArgs']]]]:
        return pulumi.get(self, "instance_selectors")

    @instance_selectors.setter
    def instance_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromInstanceSelectorArgs']]]]):
        pulumi.set(self, "instance_selectors", value)

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromIpBlockArgs']]]]:
        return pulumi.get(self, "ip_blocks")

    @ip_blocks.setter
    def ip_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromIpBlockArgs']]]]):
        pulumi.set(self, "ip_blocks", value)

    @property
    @pulumi.getter(name="networkSelectors")
    def network_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromNetworkSelectorArgs']]]]:
        return pulumi.get(self, "network_selectors")

    @network_selectors.setter
    def network_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressFromNetworkSelectorArgs']]]]):
        pulumi.set(self, "network_selectors", value)


@pulumi.input_type
class NetworkPolicyIngressFromInstanceSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class NetworkPolicyIngressFromIpBlockArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 excepts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "cidr", cidr)
        if excepts is not None:
            pulumi.set(__self__, "excepts", excepts)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def excepts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excepts")

    @excepts.setter
    def excepts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excepts", value)


@pulumi.input_type
class NetworkPolicyIngressFromNetworkSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class NetworkPolicyIngressProtocolArgs:
    def __init__(__self__, *,
                 ah: Optional[pulumi.Input['NetworkPolicyIngressProtocolAhArgs']] = None,
                 esp: Optional[pulumi.Input['NetworkPolicyIngressProtocolEspArgs']] = None,
                 gre: Optional[pulumi.Input['NetworkPolicyIngressProtocolGreArgs']] = None,
                 icmp: Optional[pulumi.Input['NetworkPolicyIngressProtocolIcmpArgs']] = None,
                 tcp: Optional[pulumi.Input['NetworkPolicyIngressProtocolTcpArgs']] = None,
                 tcp_udp: Optional[pulumi.Input['NetworkPolicyIngressProtocolTcpUdpArgs']] = None,
                 udp: Optional[pulumi.Input['NetworkPolicyIngressProtocolUdpArgs']] = None):
        if ah is not None:
            pulumi.set(__self__, "ah", ah)
        if esp is not None:
            pulumi.set(__self__, "esp", esp)
        if gre is not None:
            pulumi.set(__self__, "gre", gre)
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if tcp_udp is not None:
            pulumi.set(__self__, "tcp_udp", tcp_udp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def ah(self) -> Optional[pulumi.Input['NetworkPolicyIngressProtocolAhArgs']]:
        return pulumi.get(self, "ah")

    @ah.setter
    def ah(self, value: Optional[pulumi.Input['NetworkPolicyIngressProtocolAhArgs']]):
        pulumi.set(self, "ah", value)

    @property
    @pulumi.getter
    def esp(self) -> Optional[pulumi.Input['NetworkPolicyIngressProtocolEspArgs']]:
        return pulumi.get(self, "esp")

    @esp.setter
    def esp(self, value: Optional[pulumi.Input['NetworkPolicyIngressProtocolEspArgs']]):
        pulumi.set(self, "esp", value)

    @property
    @pulumi.getter
    def gre(self) -> Optional[pulumi.Input['NetworkPolicyIngressProtocolGreArgs']]:
        return pulumi.get(self, "gre")

    @gre.setter
    def gre(self, value: Optional[pulumi.Input['NetworkPolicyIngressProtocolGreArgs']]):
        pulumi.set(self, "gre", value)

    @property
    @pulumi.getter
    def icmp(self) -> Optional[pulumi.Input['NetworkPolicyIngressProtocolIcmpArgs']]:
        return pulumi.get(self, "icmp")

    @icmp.setter
    def icmp(self, value: Optional[pulumi.Input['NetworkPolicyIngressProtocolIcmpArgs']]):
        pulumi.set(self, "icmp", value)

    @property
    @pulumi.getter
    def tcp(self) -> Optional[pulumi.Input['NetworkPolicyIngressProtocolTcpArgs']]:
        return pulumi.get(self, "tcp")

    @tcp.setter
    def tcp(self, value: Optional[pulumi.Input['NetworkPolicyIngressProtocolTcpArgs']]):
        pulumi.set(self, "tcp", value)

    @property
    @pulumi.getter(name="tcpUdp")
    def tcp_udp(self) -> Optional[pulumi.Input['NetworkPolicyIngressProtocolTcpUdpArgs']]:
        return pulumi.get(self, "tcp_udp")

    @tcp_udp.setter
    def tcp_udp(self, value: Optional[pulumi.Input['NetworkPolicyIngressProtocolTcpUdpArgs']]):
        pulumi.set(self, "tcp_udp", value)

    @property
    @pulumi.getter
    def udp(self) -> Optional[pulumi.Input['NetworkPolicyIngressProtocolUdpArgs']]:
        return pulumi.get(self, "udp")

    @udp.setter
    def udp(self, value: Optional[pulumi.Input['NetworkPolicyIngressProtocolUdpArgs']]):
        pulumi.set(self, "udp", value)


@pulumi.input_type
class NetworkPolicyIngressProtocolAhArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NetworkPolicyIngressProtocolEspArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NetworkPolicyIngressProtocolGreArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NetworkPolicyIngressProtocolIcmpArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class NetworkPolicyIngressProtocolTcpArgs:
    def __init__(__self__, *,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ports", value)


@pulumi.input_type
class NetworkPolicyIngressProtocolTcpUdpArgs:
    def __init__(__self__, *,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ports", value)


@pulumi.input_type
class NetworkPolicyIngressProtocolUdpArgs:
    def __init__(__self__, *,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_ports", value)


@pulumi.input_type
class NetworkPolicyInstanceSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class NetworkPolicyNetworkSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class NetworkRouteGatewaySelectorArgs:
    def __init__(__self__, *,
                 interface_selectors: pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorInterfaceSelectorArgs']]]):
        pulumi.set(__self__, "interface_selectors", interface_selectors)

    @property
    @pulumi.getter(name="interfaceSelectors")
    def interface_selectors(self) -> pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorInterfaceSelectorArgs']]]:
        return pulumi.get(self, "interface_selectors")

    @interface_selectors.setter
    def interface_selectors(self, value: pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorInterfaceSelectorArgs']]]):
        pulumi.set(self, "interface_selectors", value)


@pulumi.input_type
class NetworkRouteGatewaySelectorInterfaceSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class WorkloadContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 resources: pulumi.Input['WorkloadContainerResourcesArgs'],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerEnvArgs']]]] = None,
                 liveness_probe: Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeMountArgs']]]] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['WorkloadContainerResourcesArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['WorkloadContainerResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerEnvArgs']]]]:
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']]:
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']]:
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeMountArgs']]]]:
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadContainerVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)


@pulumi.input_type
class WorkloadContainerEnvArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 secret_value: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WorkloadContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: pulumi.Input[int],
                 success_threshold: pulumi.Input[int],
                 http_get: Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadContainerLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadContainerLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadContainerLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadContainerPortArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 enable_implicit_network_policy: Optional[pulumi.Input[bool]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if enable_implicit_network_policy is not None:
            pulumi.set(__self__, "enable_implicit_network_policy", enable_implicit_network_policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="enableImplicitNetworkPolicy")
    def enable_implicit_network_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_implicit_network_policy")

    @enable_implicit_network_policy.setter
    def enable_implicit_network_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_implicit_network_policy", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WorkloadContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: pulumi.Input[int],
                 success_threshold: pulumi.Input[int],
                 http_get: Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadContainerReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadContainerReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadContainerReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadContainerResourcesArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class WorkloadContainerVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 slug: pulumi.Input[str]):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class WorkloadImagePullCredentialArgs:
    def __init__(__self__, *,
                 docker_registry: pulumi.Input['WorkloadImagePullCredentialDockerRegistryArgs']):
        pulumi.set(__self__, "docker_registry", docker_registry)

    @property
    @pulumi.getter(name="dockerRegistry")
    def docker_registry(self) -> pulumi.Input['WorkloadImagePullCredentialDockerRegistryArgs']:
        return pulumi.get(self, "docker_registry")

    @docker_registry.setter
    def docker_registry(self, value: pulumi.Input['WorkloadImagePullCredentialDockerRegistryArgs']):
        pulumi.set(self, "docker_registry", value)


@pulumi.input_type
class WorkloadImagePullCredentialDockerRegistryArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 email: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)


@pulumi.input_type
class WorkloadInstanceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerArgs']]]] = None,
                 external_ip_address: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input['WorkloadInstanceLocationArgs']] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['WorkloadInstanceMetadataArgs']] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceNetworkInterfaceArgs']]]] = None,
                 phase: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 virtual_machine: Optional[pulumi.Input['WorkloadInstanceVirtualMachineArgs']] = None):
        pulumi.set(__self__, "name", name)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if external_ip_address is not None:
            pulumi.set(__self__, "external_ip_address", external_ip_address)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if virtual_machine is not None:
            pulumi.set(__self__, "virtual_machine", virtual_machine)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerArgs']]]]:
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter(name="externalIpAddress")
    def external_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_ip_address")

    @external_ip_address.setter
    def external_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_ip_address", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['WorkloadInstanceLocationArgs']]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['WorkloadInstanceLocationArgs']]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['WorkloadInstanceMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['WorkloadInstanceMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceNetworkInterfaceArgs']]]]:
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceNetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phase", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> Optional[pulumi.Input['WorkloadInstanceVirtualMachineArgs']]:
        return pulumi.get(self, "virtual_machine")

    @virtual_machine.setter
    def virtual_machine(self, value: Optional[pulumi.Input['WorkloadInstanceVirtualMachineArgs']]):
        pulumi.set(self, "virtual_machine", value)


@pulumi.input_type
class WorkloadInstanceContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 resources: pulumi.Input['WorkloadInstanceContainerResourcesArgs'],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerEnvArgs']]]] = None,
                 liveness_probe: Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerPortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeArgs']] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerVolumeMountArgs']]]] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['WorkloadInstanceContainerResourcesArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['WorkloadInstanceContainerResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerEnvArgs']]]]:
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeArgs']]:
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerPortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeArgs']]:
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerVolumeMountArgs']]]]:
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceContainerVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)


@pulumi.input_type
class WorkloadInstanceContainerEnvArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 secret_value: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_value")

    @secret_value.setter
    def secret_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WorkloadInstanceContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: pulumi.Input[int],
                 success_threshold: pulumi.Input[int],
                 http_get: Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadInstanceContainerLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadInstanceContainerLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadInstanceContainerLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadInstanceContainerPortArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 enable_implicit_network_policy: Optional[pulumi.Input[bool]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if enable_implicit_network_policy is not None:
            pulumi.set(__self__, "enable_implicit_network_policy", enable_implicit_network_policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="enableImplicitNetworkPolicy")
    def enable_implicit_network_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_implicit_network_policy")

    @enable_implicit_network_policy.setter
    def enable_implicit_network_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_implicit_network_policy", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WorkloadInstanceContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: pulumi.Input[int],
                 success_threshold: pulumi.Input[int],
                 http_get: Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadInstanceContainerReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadInstanceContainerReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadInstanceContainerReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadInstanceContainerResourcesArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class WorkloadInstanceContainerVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 slug: pulumi.Input[str]):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class WorkloadInstanceLocationArgs:
    def __init__(__self__, *,
                 city: Optional[pulumi.Input[str]] = None,
                 city_code: Optional[pulumi.Input[str]] = None,
                 continent: Optional[pulumi.Input[str]] = None,
                 continent_code: Optional[pulumi.Input[str]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 latitude: Optional[pulumi.Input[float]] = None,
                 longitude: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 region_code: Optional[pulumi.Input[str]] = None,
                 subdivision: Optional[pulumi.Input[str]] = None,
                 subdivision_code: Optional[pulumi.Input[str]] = None):
        if city is not None:
            pulumi.set(__self__, "city", city)
        if city_code is not None:
            pulumi.set(__self__, "city_code", city_code)
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if continent_code is not None:
            pulumi.set(__self__, "continent_code", continent_code)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_code is not None:
            pulumi.set(__self__, "region_code", region_code)
        if subdivision is not None:
            pulumi.set(__self__, "subdivision", subdivision)
        if subdivision_code is not None:
            pulumi.set(__self__, "subdivision_code", subdivision_code)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter(name="cityCode")
    def city_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city_code")

    @city_code.setter
    def city_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city_code", value)

    @property
    @pulumi.getter
    def continent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "continent")

    @continent.setter
    def continent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "continent", value)

    @property
    @pulumi.getter(name="continentCode")
    def continent_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "continent_code")

    @continent_code.setter
    def continent_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "continent_code", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region_code")

    @region_code.setter
    def region_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_code", value)

    @property
    @pulumi.getter
    def subdivision(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subdivision")

    @subdivision.setter
    def subdivision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdivision", value)

    @property
    @pulumi.getter(name="subdivisionCode")
    def subdivision_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subdivision_code")

    @subdivision_code.setter
    def subdivision_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdivision_code", value)


@pulumi.input_type
class WorkloadInstanceMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class WorkloadInstanceNetworkInterfaceArgs:
    def __init__(__self__, *,
                 gateway: pulumi.Input[str],
                 ip_address: pulumi.Input[str],
                 network: pulumi.Input[str],
                 ip_address_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "network", network)
        if ip_address_aliases is not None:
            pulumi.set(__self__, "ip_address_aliases", ip_address_aliases)

    @property
    @pulumi.getter
    def gateway(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="ipAddressAliases")
    def ip_address_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_address_aliases")

    @ip_address_aliases.setter
    def ip_address_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_address_aliases", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 resources: pulumi.Input['WorkloadInstanceVirtualMachineResourcesArgs'],
                 liveness_probe: Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceVirtualMachinePortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeArgs']] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceVirtualMachineVolumeMountArgs']]]] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['WorkloadInstanceVirtualMachineResourcesArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['WorkloadInstanceVirtualMachineResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeArgs']]:
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceVirtualMachinePortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceVirtualMachinePortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeArgs']]:
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceVirtualMachineVolumeMountArgs']]]]:
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadInstanceVirtualMachineVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineLivenessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: pulumi.Input[int],
                 success_threshold: pulumi.Input[int],
                 http_get: Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadInstanceVirtualMachineLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachinePortArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 enable_implicit_network_policy: Optional[pulumi.Input[bool]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if enable_implicit_network_policy is not None:
            pulumi.set(__self__, "enable_implicit_network_policy", enable_implicit_network_policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="enableImplicitNetworkPolicy")
    def enable_implicit_network_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_implicit_network_policy")

    @enable_implicit_network_policy.setter
    def enable_implicit_network_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_implicit_network_policy", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineReadinessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: pulumi.Input[int],
                 success_threshold: pulumi.Input[int],
                 http_get: Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadInstanceVirtualMachineReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineResourcesArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class WorkloadInstanceVirtualMachineVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 slug: pulumi.Input[str]):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class WorkloadNetworkInterfaceArgs:
    def __init__(__self__, *,
                 network: pulumi.Input[str],
                 enable_one_to_one_nat: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "network", network)
        if enable_one_to_one_nat is not None:
            pulumi.set(__self__, "enable_one_to_one_nat", enable_one_to_one_nat)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="enableOneToOneNat")
    def enable_one_to_one_nat(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_one_to_one_nat")

    @enable_one_to_one_nat.setter
    def enable_one_to_one_nat(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_one_to_one_nat", value)


@pulumi.input_type
class WorkloadTargetArgs:
    def __init__(__self__, *,
                 min_replicas: pulumi.Input[int],
                 name: pulumi.Input[str],
                 selectors: pulumi.Input[Sequence[pulumi.Input['WorkloadTargetSelectorArgs']]],
                 deployment_scope: Optional[pulumi.Input[str]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 scale_settings: Optional[pulumi.Input['WorkloadTargetScaleSettingsArgs']] = None):
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selectors", selectors)
        if deployment_scope is not None:
            pulumi.set(__self__, "deployment_scope", deployment_scope)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if scale_settings is not None:
            pulumi.set(__self__, "scale_settings", scale_settings)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def selectors(self) -> pulumi.Input[Sequence[pulumi.Input['WorkloadTargetSelectorArgs']]]:
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: pulumi.Input[Sequence[pulumi.Input['WorkloadTargetSelectorArgs']]]):
        pulumi.set(self, "selectors", value)

    @property
    @pulumi.getter(name="deploymentScope")
    def deployment_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deployment_scope")

    @deployment_scope.setter
    def deployment_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deployment_scope", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="scaleSettings")
    def scale_settings(self) -> Optional[pulumi.Input['WorkloadTargetScaleSettingsArgs']]:
        return pulumi.get(self, "scale_settings")

    @scale_settings.setter
    def scale_settings(self, value: Optional[pulumi.Input['WorkloadTargetScaleSettingsArgs']]):
        pulumi.set(self, "scale_settings", value)


@pulumi.input_type
class WorkloadTargetScaleSettingsArgs:
    def __init__(__self__, *,
                 metrics: pulumi.Input[Sequence[pulumi.Input['WorkloadTargetScaleSettingsMetricArgs']]]):
        pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter
    def metrics(self) -> pulumi.Input[Sequence[pulumi.Input['WorkloadTargetScaleSettingsMetricArgs']]]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: pulumi.Input[Sequence[pulumi.Input['WorkloadTargetScaleSettingsMetricArgs']]]):
        pulumi.set(self, "metrics", value)


@pulumi.input_type
class WorkloadTargetScaleSettingsMetricArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 average_utilization: Optional[pulumi.Input[int]] = None,
                 average_value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "metric", metric)
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "average_utilization")

    @average_utilization.setter
    def average_utilization(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "average_utilization", value)

    @property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "average_value")

    @average_value.setter
    def average_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "average_value", value)


@pulumi.input_type
class WorkloadTargetSelectorArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class WorkloadVirtualMachineArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 resources: pulumi.Input['WorkloadVirtualMachineResourcesArgs'],
                 liveness_probe: Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeArgs']] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadVirtualMachinePortArgs']]]] = None,
                 readiness_probe: Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeArgs']] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadVirtualMachineVolumeMountArgs']]]] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['WorkloadVirtualMachineResourcesArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['WorkloadVirtualMachineResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeArgs']]:
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadVirtualMachinePortArgs']]]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadVirtualMachinePortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeArgs']]:
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadVirtualMachineVolumeMountArgs']]]]:
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadVirtualMachineVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)


@pulumi.input_type
class WorkloadVirtualMachineLivenessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: pulumi.Input[int],
                 success_threshold: pulumi.Input[int],
                 http_get: Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadVirtualMachineLivenessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadVirtualMachineLivenessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadVirtualMachineLivenessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadVirtualMachinePortArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 enable_implicit_network_policy: Optional[pulumi.Input[bool]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if enable_implicit_network_policy is not None:
            pulumi.set(__self__, "enable_implicit_network_policy", enable_implicit_network_policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="enableImplicitNetworkPolicy")
    def enable_implicit_network_policy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_implicit_network_policy")

    @enable_implicit_network_policy.setter
    def enable_implicit_network_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_implicit_network_policy", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class WorkloadVirtualMachineReadinessProbeArgs:
    def __init__(__self__, *,
                 failure_threshold: pulumi.Input[int],
                 success_threshold: pulumi.Input[int],
                 http_get: Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeHttpGetArgs']] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 tcp_socket: Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeTcpSocketArgs']] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeHttpGetArgs']]:
        return pulumi.get(self, "http_get")

    @http_get.setter
    def http_get(self, value: Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeHttpGetArgs']]):
        pulumi.set(self, "http_get", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeTcpSocketArgs']]:
        return pulumi.get(self, "tcp_socket")

    @tcp_socket.setter
    def tcp_socket(self, value: Optional[pulumi.Input['WorkloadVirtualMachineReadinessProbeTcpSocketArgs']]):
        pulumi.set(self, "tcp_socket", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadVirtualMachineReadinessProbeHttpGetArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 http_headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 scheme: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "http_headers")

    @http_headers.setter
    def http_headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "http_headers", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)


@pulumi.input_type
class WorkloadVirtualMachineReadinessProbeTcpSocketArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class WorkloadVirtualMachineResourcesArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "requests", value)


@pulumi.input_type
class WorkloadVirtualMachineVolumeMountArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 slug: pulumi.Input[str]):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class WorkloadVolumeClaimArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 resources: pulumi.Input['WorkloadVolumeClaimResourcesArgs'],
                 slug: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input['WorkloadVolumeClaimResourcesArgs']:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input['WorkloadVolumeClaimResourcesArgs']):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class WorkloadVolumeClaimResourcesArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "requests", value)



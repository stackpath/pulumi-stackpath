// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

export class NetworkPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPolicyState, opts?: pulumi.CustomResourceOptions): NetworkPolicy {
        return new NetworkPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackpath:compute/networkPolicy:NetworkPolicy';

    /**
     * Returns true if the given object is an instance of NetworkPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPolicy.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly egresses!: pulumi.Output<outputs.compute.NetworkPolicyEgress[] | undefined>;
    public readonly ingresses!: pulumi.Output<outputs.compute.NetworkPolicyIngress[] | undefined>;
    public readonly instanceSelectors!: pulumi.Output<outputs.compute.NetworkPolicyInstanceSelector[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkSelectors!: pulumi.Output<outputs.compute.NetworkPolicyNetworkSelector[] | undefined>;
    public readonly policyTypes!: pulumi.Output<string[]>;
    public readonly priority!: pulumi.Output<number>;
    public readonly slug!: pulumi.Output<string>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a NetworkPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPolicyArgs | NetworkPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkPolicyState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["egresses"] = state ? state.egresses : undefined;
            resourceInputs["ingresses"] = state ? state.ingresses : undefined;
            resourceInputs["instanceSelectors"] = state ? state.instanceSelectors : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkSelectors"] = state ? state.networkSelectors : undefined;
            resourceInputs["policyTypes"] = state ? state.policyTypes : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as NetworkPolicyArgs | undefined;
            if ((!args || args.policyTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyTypes'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["egresses"] = args ? args.egresses : undefined;
            resourceInputs["ingresses"] = args ? args.ingresses : undefined;
            resourceInputs["instanceSelectors"] = args ? args.instanceSelectors : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkSelectors"] = args ? args.networkSelectors : undefined;
            resourceInputs["policyTypes"] = args ? args.policyTypes : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkPolicy resources.
 */
export interface NetworkPolicyState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    egresses?: pulumi.Input<pulumi.Input<inputs.compute.NetworkPolicyEgress>[]>;
    ingresses?: pulumi.Input<pulumi.Input<inputs.compute.NetworkPolicyIngress>[]>;
    instanceSelectors?: pulumi.Input<pulumi.Input<inputs.compute.NetworkPolicyInstanceSelector>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networkSelectors?: pulumi.Input<pulumi.Input<inputs.compute.NetworkPolicyNetworkSelector>[]>;
    policyTypes?: pulumi.Input<pulumi.Input<string>[]>;
    priority?: pulumi.Input<number>;
    slug?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkPolicy resource.
 */
export interface NetworkPolicyArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    egresses?: pulumi.Input<pulumi.Input<inputs.compute.NetworkPolicyEgress>[]>;
    ingresses?: pulumi.Input<pulumi.Input<inputs.compute.NetworkPolicyIngress>[]>;
    instanceSelectors?: pulumi.Input<pulumi.Input<inputs.compute.NetworkPolicyInstanceSelector>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networkSelectors?: pulumi.Input<pulumi.Input<inputs.compute.NetworkPolicyNetworkSelector>[]>;
    policyTypes: pulumi.Input<pulumi.Input<string>[]>;
    priority: pulumi.Input<number>;
    slug: pulumi.Input<string>;
}

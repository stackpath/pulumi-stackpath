// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Workload extends pulumi.CustomResource {
    /**
     * Get an existing Workload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkloadState, opts?: pulumi.CustomResourceOptions): Workload {
        return new Workload(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stackpath:compute/workload:Workload';

    /**
     * Returns true if the given object is an instance of Workload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workload {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workload.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<{[key: string]: string}>;
    public readonly containerRuntimeEnvironment!: pulumi.Output<outputs.compute.WorkloadContainerRuntimeEnvironment | undefined>;
    public readonly containers!: pulumi.Output<outputs.compute.WorkloadContainer[] | undefined>;
    public readonly imagePullCredentials!: pulumi.Output<outputs.compute.WorkloadImagePullCredential[] | undefined>;
    public readonly instances!: pulumi.Output<outputs.compute.WorkloadInstance[]>;
    public readonly labels!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.compute.WorkloadNetworkInterface[]>;
    public readonly slug!: pulumi.Output<string>;
    public readonly targets!: pulumi.Output<outputs.compute.WorkloadTarget[]>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly virtualMachine!: pulumi.Output<outputs.compute.WorkloadVirtualMachine | undefined>;
    public readonly virtualMachineRuntimeEnvironment!: pulumi.Output<outputs.compute.WorkloadVirtualMachineRuntimeEnvironment | undefined>;
    public readonly volumeClaims!: pulumi.Output<outputs.compute.WorkloadVolumeClaim[] | undefined>;

    /**
     * Create a Workload resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkloadArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkloadArgs | WorkloadState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkloadState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["containerRuntimeEnvironment"] = state ? state.containerRuntimeEnvironment : undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["imagePullCredentials"] = state ? state.imagePullCredentials : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["virtualMachine"] = state ? state.virtualMachine : undefined;
            resourceInputs["virtualMachineRuntimeEnvironment"] = state ? state.virtualMachineRuntimeEnvironment : undefined;
            resourceInputs["volumeClaims"] = state ? state.volumeClaims : undefined;
        } else {
            const args = argsOrState as WorkloadArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.networkInterfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            if ((!args || args.targets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targets'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["containerRuntimeEnvironment"] = args ? args.containerRuntimeEnvironment : undefined;
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["imagePullCredentials"] = args ? args.imagePullCredentials : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["virtualMachine"] = args ? args.virtualMachine : undefined;
            resourceInputs["virtualMachineRuntimeEnvironment"] = args ? args.virtualMachineRuntimeEnvironment : undefined;
            resourceInputs["volumeClaims"] = args ? args.volumeClaims : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workload.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workload resources.
 */
export interface WorkloadState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    containerRuntimeEnvironment?: pulumi.Input<inputs.compute.WorkloadContainerRuntimeEnvironment>;
    containers?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadContainer>[]>;
    imagePullCredentials?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadImagePullCredential>[]>;
    instances?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadInstance>[]>;
    labels?: pulumi.Input<{[key: string]: any}>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadNetworkInterface>[]>;
    slug?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadTarget>[]>;
    version?: pulumi.Input<string>;
    virtualMachine?: pulumi.Input<inputs.compute.WorkloadVirtualMachine>;
    virtualMachineRuntimeEnvironment?: pulumi.Input<inputs.compute.WorkloadVirtualMachineRuntimeEnvironment>;
    volumeClaims?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadVolumeClaim>[]>;
}

/**
 * The set of arguments for constructing a Workload resource.
 */
export interface WorkloadArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    containerRuntimeEnvironment?: pulumi.Input<inputs.compute.WorkloadContainerRuntimeEnvironment>;
    containers?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadContainer>[]>;
    imagePullCredentials?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadImagePullCredential>[]>;
    instances?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadInstance>[]>;
    labels?: pulumi.Input<{[key: string]: any}>;
    name: pulumi.Input<string>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.compute.WorkloadNetworkInterface>[]>;
    slug: pulumi.Input<string>;
    targets: pulumi.Input<pulumi.Input<inputs.compute.WorkloadTarget>[]>;
    virtualMachine?: pulumi.Input<inputs.compute.WorkloadVirtualMachine>;
    virtualMachineRuntimeEnvironment?: pulumi.Input<inputs.compute.WorkloadVirtualMachineRuntimeEnvironment>;
    volumeClaims?: pulumi.Input<pulumi.Input<inputs.compute.WorkloadVolumeClaim>[]>;
}

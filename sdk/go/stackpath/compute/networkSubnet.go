// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/stackpath/pulumi-stackpath/sdk/go/stackpath/internal"
)

type NetworkSubnet struct {
	pulumi.CustomResourceState

	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	Labels      pulumi.StringMapOutput `pulumi:"labels"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	NetworkId   pulumi.StringOutput    `pulumi:"networkId"`
	Prefix      pulumi.StringOutput    `pulumi:"prefix"`
	Slug        pulumi.StringOutput    `pulumi:"slug"`
	Version     pulumi.StringOutput    `pulumi:"version"`
}

// NewNetworkSubnet registers a new resource with the given unique name, arguments, and options.
func NewNetworkSubnet(ctx *pulumi.Context,
	name string, args *NetworkSubnetArgs, opts ...pulumi.ResourceOption) (*NetworkSubnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Prefix'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkSubnet
	err := ctx.RegisterResource("stackpath:compute/networkSubnet:NetworkSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkSubnet gets an existing NetworkSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkSubnetState, opts ...pulumi.ResourceOption) (*NetworkSubnet, error) {
	var resource NetworkSubnet
	err := ctx.ReadResource("stackpath:compute/networkSubnet:NetworkSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkSubnet resources.
type networkSubnetState struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	NetworkId   *string           `pulumi:"networkId"`
	Prefix      *string           `pulumi:"prefix"`
	Slug        *string           `pulumi:"slug"`
	Version     *string           `pulumi:"version"`
}

type NetworkSubnetState struct {
	Annotations pulumi.StringMapInput
	Labels      pulumi.StringMapInput
	Name        pulumi.StringPtrInput
	NetworkId   pulumi.StringPtrInput
	Prefix      pulumi.StringPtrInput
	Slug        pulumi.StringPtrInput
	Version     pulumi.StringPtrInput
}

func (NetworkSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSubnetState)(nil)).Elem()
}

type networkSubnetArgs struct {
	Annotations map[string]string `pulumi:"annotations"`
	Labels      map[string]string `pulumi:"labels"`
	Name        *string           `pulumi:"name"`
	NetworkId   string            `pulumi:"networkId"`
	Prefix      string            `pulumi:"prefix"`
	Slug        *string           `pulumi:"slug"`
}

// The set of arguments for constructing a NetworkSubnet resource.
type NetworkSubnetArgs struct {
	Annotations pulumi.StringMapInput
	Labels      pulumi.StringMapInput
	Name        pulumi.StringPtrInput
	NetworkId   pulumi.StringInput
	Prefix      pulumi.StringInput
	Slug        pulumi.StringPtrInput
}

func (NetworkSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkSubnetArgs)(nil)).Elem()
}

type NetworkSubnetInput interface {
	pulumi.Input

	ToNetworkSubnetOutput() NetworkSubnetOutput
	ToNetworkSubnetOutputWithContext(ctx context.Context) NetworkSubnetOutput
}

func (*NetworkSubnet) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSubnet)(nil)).Elem()
}

func (i *NetworkSubnet) ToNetworkSubnetOutput() NetworkSubnetOutput {
	return i.ToNetworkSubnetOutputWithContext(context.Background())
}

func (i *NetworkSubnet) ToNetworkSubnetOutputWithContext(ctx context.Context) NetworkSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSubnetOutput)
}

// NetworkSubnetArrayInput is an input type that accepts NetworkSubnetArray and NetworkSubnetArrayOutput values.
// You can construct a concrete instance of `NetworkSubnetArrayInput` via:
//
//	NetworkSubnetArray{ NetworkSubnetArgs{...} }
type NetworkSubnetArrayInput interface {
	pulumi.Input

	ToNetworkSubnetArrayOutput() NetworkSubnetArrayOutput
	ToNetworkSubnetArrayOutputWithContext(context.Context) NetworkSubnetArrayOutput
}

type NetworkSubnetArray []NetworkSubnetInput

func (NetworkSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSubnet)(nil)).Elem()
}

func (i NetworkSubnetArray) ToNetworkSubnetArrayOutput() NetworkSubnetArrayOutput {
	return i.ToNetworkSubnetArrayOutputWithContext(context.Background())
}

func (i NetworkSubnetArray) ToNetworkSubnetArrayOutputWithContext(ctx context.Context) NetworkSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSubnetArrayOutput)
}

// NetworkSubnetMapInput is an input type that accepts NetworkSubnetMap and NetworkSubnetMapOutput values.
// You can construct a concrete instance of `NetworkSubnetMapInput` via:
//
//	NetworkSubnetMap{ "key": NetworkSubnetArgs{...} }
type NetworkSubnetMapInput interface {
	pulumi.Input

	ToNetworkSubnetMapOutput() NetworkSubnetMapOutput
	ToNetworkSubnetMapOutputWithContext(context.Context) NetworkSubnetMapOutput
}

type NetworkSubnetMap map[string]NetworkSubnetInput

func (NetworkSubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSubnet)(nil)).Elem()
}

func (i NetworkSubnetMap) ToNetworkSubnetMapOutput() NetworkSubnetMapOutput {
	return i.ToNetworkSubnetMapOutputWithContext(context.Background())
}

func (i NetworkSubnetMap) ToNetworkSubnetMapOutputWithContext(ctx context.Context) NetworkSubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkSubnetMapOutput)
}

type NetworkSubnetOutput struct{ *pulumi.OutputState }

func (NetworkSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkSubnet)(nil)).Elem()
}

func (o NetworkSubnetOutput) ToNetworkSubnetOutput() NetworkSubnetOutput {
	return o
}

func (o NetworkSubnetOutput) ToNetworkSubnetOutputWithContext(ctx context.Context) NetworkSubnetOutput {
	return o
}

func (o NetworkSubnetOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o NetworkSubnetOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o NetworkSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkSubnetOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o NetworkSubnetOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

func (o NetworkSubnetOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o NetworkSubnetOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkSubnet) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type NetworkSubnetArrayOutput struct{ *pulumi.OutputState }

func (NetworkSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkSubnet)(nil)).Elem()
}

func (o NetworkSubnetArrayOutput) ToNetworkSubnetArrayOutput() NetworkSubnetArrayOutput {
	return o
}

func (o NetworkSubnetArrayOutput) ToNetworkSubnetArrayOutputWithContext(ctx context.Context) NetworkSubnetArrayOutput {
	return o
}

func (o NetworkSubnetArrayOutput) Index(i pulumi.IntInput) NetworkSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkSubnet {
		return vs[0].([]*NetworkSubnet)[vs[1].(int)]
	}).(NetworkSubnetOutput)
}

type NetworkSubnetMapOutput struct{ *pulumi.OutputState }

func (NetworkSubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkSubnet)(nil)).Elem()
}

func (o NetworkSubnetMapOutput) ToNetworkSubnetMapOutput() NetworkSubnetMapOutput {
	return o
}

func (o NetworkSubnetMapOutput) ToNetworkSubnetMapOutputWithContext(ctx context.Context) NetworkSubnetMapOutput {
	return o
}

func (o NetworkSubnetMapOutput) MapIndex(k pulumi.StringInput) NetworkSubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkSubnet {
		return vs[0].(map[string]*NetworkSubnet)[vs[1].(string)]
	}).(NetworkSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSubnetInput)(nil)).Elem(), &NetworkSubnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSubnetArrayInput)(nil)).Elem(), NetworkSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkSubnetMapInput)(nil)).Elem(), NetworkSubnetMap{})
	pulumi.RegisterOutputType(NetworkSubnetOutput{})
	pulumi.RegisterOutputType(NetworkSubnetArrayOutput{})
	pulumi.RegisterOutputType(NetworkSubnetMapOutput{})
}

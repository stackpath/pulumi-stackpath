# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkRouteArgs', 'NetworkRoute']

@pulumi.input_type
class NetworkRouteArgs:
    def __init__(__self__, *,
                 destination_prefixes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 network_id: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 gateway_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NetworkRoute resource.
        """
        pulumi.set(__self__, "destination_prefixes", destination_prefixes)
        pulumi.set(__self__, "network_id", network_id)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if gateway_selectors is not None:
            pulumi.set(__self__, "gateway_selectors", gateway_selectors)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="destinationPrefixes")
    def destination_prefixes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "destination_prefixes")

    @destination_prefixes.setter
    def destination_prefixes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "destination_prefixes", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="gatewaySelectors")
    def gateway_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorArgs']]]]:
        return pulumi.get(self, "gateway_selectors")

    @gateway_selectors.setter
    def gateway_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorArgs']]]]):
        pulumi.set(self, "gateway_selectors", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _NetworkRouteState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 destination_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkRoute resources.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if destination_prefixes is not None:
            pulumi.set(__self__, "destination_prefixes", destination_prefixes)
        if gateway_selectors is not None:
            pulumi.set(__self__, "gateway_selectors", gateway_selectors)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter(name="destinationPrefixes")
    def destination_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "destination_prefixes")

    @destination_prefixes.setter
    def destination_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "destination_prefixes", value)

    @property
    @pulumi.getter(name="gatewaySelectors")
    def gateway_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorArgs']]]]:
        return pulumi.get(self, "gateway_selectors")

    @gateway_selectors.setter
    def gateway_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkRouteGatewaySelectorArgs']]]]):
        pulumi.set(self, "gateway_selectors", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class NetworkRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 destination_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkRouteGatewaySelectorArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NetworkRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkRoute resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 destination_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkRouteGatewaySelectorArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkRouteArgs.__new__(NetworkRouteArgs)

            __props__.__dict__["annotations"] = annotations
            if destination_prefixes is None and not opts.urn:
                raise TypeError("Missing required property 'destination_prefixes'")
            __props__.__dict__["destination_prefixes"] = destination_prefixes
            __props__.__dict__["gateway_selectors"] = gateway_selectors
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["slug"] = slug
            __props__.__dict__["version"] = None
        super(NetworkRoute, __self__).__init__(
            'stackpath:compute/networkRoute:NetworkRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            destination_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            gateway_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkRouteGatewaySelectorArgs']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'NetworkRoute':
        """
        Get an existing NetworkRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkRouteState.__new__(_NetworkRouteState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["destination_prefixes"] = destination_prefixes
        __props__.__dict__["gateway_selectors"] = gateway_selectors
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["slug"] = slug
        __props__.__dict__["version"] = version
        return NetworkRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter(name="destinationPrefixes")
    def destination_prefixes(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "destination_prefixes")

    @property
    @pulumi.getter(name="gatewaySelectors")
    def gateway_selectors(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkRouteGatewaySelector']]]:
        return pulumi.get(self, "gateway_selectors")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "version")


// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/stackpath/pulumi-stackpath/sdk/go/stackpath/internal"
)

type Network struct {
	pulumi.CustomResourceState

	Annotations              pulumi.StringMapOutput   `pulumi:"annotations"`
	IpFamilies               pulumi.StringArrayOutput `pulumi:"ipFamilies"`
	Ipv6Subnet               pulumi.StringPtrOutput   `pulumi:"ipv6Subnet"`
	Labels                   pulumi.StringMapOutput   `pulumi:"labels"`
	Name                     pulumi.StringOutput      `pulumi:"name"`
	RootSubnet               pulumi.StringOutput      `pulumi:"rootSubnet"`
	Slug                     pulumi.StringOutput      `pulumi:"slug"`
	Version                  pulumi.StringOutput      `pulumi:"version"`
	VirtualNetworkIdentifier pulumi.IntOutput         `pulumi:"virtualNetworkIdentifier"`
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOption) (*Network, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.RootSubnet == nil {
		return nil, errors.New("invalid value for required argument 'RootSubnet'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Network
	err := ctx.RegisterResource("stackpath:compute/network:Network", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkState, opts ...pulumi.ResourceOption) (*Network, error) {
	var resource Network
	err := ctx.ReadResource("stackpath:compute/network:Network", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Network resources.
type networkState struct {
	Annotations              map[string]string `pulumi:"annotations"`
	IpFamilies               []string          `pulumi:"ipFamilies"`
	Ipv6Subnet               *string           `pulumi:"ipv6Subnet"`
	Labels                   map[string]string `pulumi:"labels"`
	Name                     *string           `pulumi:"name"`
	RootSubnet               *string           `pulumi:"rootSubnet"`
	Slug                     *string           `pulumi:"slug"`
	Version                  *string           `pulumi:"version"`
	VirtualNetworkIdentifier *int              `pulumi:"virtualNetworkIdentifier"`
}

type NetworkState struct {
	Annotations              pulumi.StringMapInput
	IpFamilies               pulumi.StringArrayInput
	Ipv6Subnet               pulumi.StringPtrInput
	Labels                   pulumi.StringMapInput
	Name                     pulumi.StringPtrInput
	RootSubnet               pulumi.StringPtrInput
	Slug                     pulumi.StringPtrInput
	Version                  pulumi.StringPtrInput
	VirtualNetworkIdentifier pulumi.IntPtrInput
}

func (NetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkState)(nil)).Elem()
}

type networkArgs struct {
	Annotations map[string]string `pulumi:"annotations"`
	IpFamilies  []string          `pulumi:"ipFamilies"`
	Ipv6Subnet  *string           `pulumi:"ipv6Subnet"`
	Labels      map[string]string `pulumi:"labels"`
	Name        string            `pulumi:"name"`
	RootSubnet  string            `pulumi:"rootSubnet"`
	Slug        string            `pulumi:"slug"`
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	Annotations pulumi.StringMapInput
	IpFamilies  pulumi.StringArrayInput
	Ipv6Subnet  pulumi.StringPtrInput
	Labels      pulumi.StringMapInput
	Name        pulumi.StringInput
	RootSubnet  pulumi.StringInput
	Slug        pulumi.StringInput
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkArgs)(nil)).Elem()
}

type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(ctx context.Context) NetworkOutput
}

func (*Network) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *Network) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i *Network) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

// NetworkArrayInput is an input type that accepts NetworkArray and NetworkArrayOutput values.
// You can construct a concrete instance of `NetworkArrayInput` via:
//
//	NetworkArray{ NetworkArgs{...} }
type NetworkArrayInput interface {
	pulumi.Input

	ToNetworkArrayOutput() NetworkArrayOutput
	ToNetworkArrayOutputWithContext(context.Context) NetworkArrayOutput
}

type NetworkArray []NetworkInput

func (NetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (i NetworkArray) ToNetworkArrayOutput() NetworkArrayOutput {
	return i.ToNetworkArrayOutputWithContext(context.Background())
}

func (i NetworkArray) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkArrayOutput)
}

// NetworkMapInput is an input type that accepts NetworkMap and NetworkMapOutput values.
// You can construct a concrete instance of `NetworkMapInput` via:
//
//	NetworkMap{ "key": NetworkArgs{...} }
type NetworkMapInput interface {
	pulumi.Input

	ToNetworkMapOutput() NetworkMapOutput
	ToNetworkMapOutputWithContext(context.Context) NetworkMapOutput
}

type NetworkMap map[string]NetworkInput

func (NetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (i NetworkMap) ToNetworkMapOutput() NetworkMapOutput {
	return i.ToNetworkMapOutputWithContext(context.Background())
}

func (i NetworkMap) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkMapOutput)
}

type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

func (o NetworkOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Network) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o NetworkOutput) IpFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Network) pulumi.StringArrayOutput { return v.IpFamilies }).(pulumi.StringArrayOutput)
}

func (o NetworkOutput) Ipv6Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) pulumi.StringPtrOutput { return v.Ipv6Subnet }).(pulumi.StringPtrOutput)
}

func (o NetworkOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Network) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o NetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkOutput) RootSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.RootSubnet }).(pulumi.StringOutput)
}

func (o NetworkOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o NetworkOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Network) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o NetworkOutput) VirtualNetworkIdentifier() pulumi.IntOutput {
	return o.ApplyT(func(v *Network) pulumi.IntOutput { return v.VirtualNetworkIdentifier }).(pulumi.IntOutput)
}

type NetworkArrayOutput struct{ *pulumi.OutputState }

func (NetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Network)(nil)).Elem()
}

func (o NetworkArrayOutput) ToNetworkArrayOutput() NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) ToNetworkArrayOutputWithContext(ctx context.Context) NetworkArrayOutput {
	return o
}

func (o NetworkArrayOutput) Index(i pulumi.IntInput) NetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Network {
		return vs[0].([]*Network)[vs[1].(int)]
	}).(NetworkOutput)
}

type NetworkMapOutput struct{ *pulumi.OutputState }

func (NetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Network)(nil)).Elem()
}

func (o NetworkMapOutput) ToNetworkMapOutput() NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) ToNetworkMapOutputWithContext(ctx context.Context) NetworkMapOutput {
	return o
}

func (o NetworkMapOutput) MapIndex(k pulumi.StringInput) NetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Network {
		return vs[0].(map[string]*Network)[vs[1].(string)]
	}).(NetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), &Network{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkArrayInput)(nil)).Elem(), NetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkMapInput)(nil)).Elem(), NetworkMap{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkArrayOutput{})
	pulumi.RegisterOutputType(NetworkMapOutput{})
}

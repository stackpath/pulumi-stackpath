# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'NetworkPolicyEgress',
    'NetworkPolicyEgressProtocol',
    'NetworkPolicyEgressProtocolAh',
    'NetworkPolicyEgressProtocolEsp',
    'NetworkPolicyEgressProtocolGre',
    'NetworkPolicyEgressProtocolIcmp',
    'NetworkPolicyEgressProtocolTcp',
    'NetworkPolicyEgressProtocolTcpUdp',
    'NetworkPolicyEgressProtocolUdp',
    'NetworkPolicyEgressTo',
    'NetworkPolicyEgressToInstanceSelector',
    'NetworkPolicyEgressToIpBlock',
    'NetworkPolicyEgressToNetworkSelector',
    'NetworkPolicyIngress',
    'NetworkPolicyIngressFrom',
    'NetworkPolicyIngressFromInstanceSelector',
    'NetworkPolicyIngressFromIpBlock',
    'NetworkPolicyIngressFromNetworkSelector',
    'NetworkPolicyIngressProtocol',
    'NetworkPolicyIngressProtocolAh',
    'NetworkPolicyIngressProtocolEsp',
    'NetworkPolicyIngressProtocolGre',
    'NetworkPolicyIngressProtocolIcmp',
    'NetworkPolicyIngressProtocolTcp',
    'NetworkPolicyIngressProtocolTcpUdp',
    'NetworkPolicyIngressProtocolUdp',
    'NetworkPolicyInstanceSelector',
    'NetworkPolicyNetworkSelector',
    'NetworkRouteGatewaySelector',
    'NetworkRouteGatewaySelectorInterfaceSelector',
    'WorkloadContainer',
    'WorkloadContainerEnv',
    'WorkloadContainerLivenessProbe',
    'WorkloadContainerLivenessProbeHttpGet',
    'WorkloadContainerLivenessProbeTcpSocket',
    'WorkloadContainerPort',
    'WorkloadContainerReadinessProbe',
    'WorkloadContainerReadinessProbeHttpGet',
    'WorkloadContainerReadinessProbeTcpSocket',
    'WorkloadContainerResources',
    'WorkloadContainerRuntimeEnvironment',
    'WorkloadContainerRuntimeEnvironmentDns',
    'WorkloadContainerRuntimeEnvironmentDnsHostAlias',
    'WorkloadContainerRuntimeEnvironmentDnsResolverConfig',
    'WorkloadContainerRuntimeEnvironmentSecurityContext',
    'WorkloadContainerSecurityContext',
    'WorkloadContainerSecurityContextCapabilities',
    'WorkloadContainerVolumeMount',
    'WorkloadImagePullCredential',
    'WorkloadImagePullCredentialDockerRegistry',
    'WorkloadInstance',
    'WorkloadInstanceContainer',
    'WorkloadInstanceContainerEnv',
    'WorkloadInstanceContainerLivenessProbe',
    'WorkloadInstanceContainerLivenessProbeHttpGet',
    'WorkloadInstanceContainerLivenessProbeTcpSocket',
    'WorkloadInstanceContainerPort',
    'WorkloadInstanceContainerReadinessProbe',
    'WorkloadInstanceContainerReadinessProbeHttpGet',
    'WorkloadInstanceContainerReadinessProbeTcpSocket',
    'WorkloadInstanceContainerResources',
    'WorkloadInstanceContainerSecurityContext',
    'WorkloadInstanceContainerSecurityContextCapabilities',
    'WorkloadInstanceContainerVolumeMount',
    'WorkloadInstanceLocation',
    'WorkloadInstanceMetadata',
    'WorkloadInstanceNetworkInterface',
    'WorkloadInstanceVirtualMachine',
    'WorkloadInstanceVirtualMachineLivenessProbe',
    'WorkloadInstanceVirtualMachineLivenessProbeHttpGet',
    'WorkloadInstanceVirtualMachineLivenessProbeTcpSocket',
    'WorkloadInstanceVirtualMachinePort',
    'WorkloadInstanceVirtualMachineReadinessProbe',
    'WorkloadInstanceVirtualMachineReadinessProbeHttpGet',
    'WorkloadInstanceVirtualMachineReadinessProbeTcpSocket',
    'WorkloadInstanceVirtualMachineResources',
    'WorkloadInstanceVirtualMachineVolumeMount',
    'WorkloadNetworkInterface',
    'WorkloadTarget',
    'WorkloadTargetScaleSettings',
    'WorkloadTargetScaleSettingsMetric',
    'WorkloadTargetSelector',
    'WorkloadVirtualMachine',
    'WorkloadVirtualMachineLivenessProbe',
    'WorkloadVirtualMachineLivenessProbeHttpGet',
    'WorkloadVirtualMachineLivenessProbeTcpSocket',
    'WorkloadVirtualMachinePort',
    'WorkloadVirtualMachineReadinessProbe',
    'WorkloadVirtualMachineReadinessProbeHttpGet',
    'WorkloadVirtualMachineReadinessProbeTcpSocket',
    'WorkloadVirtualMachineResources',
    'WorkloadVirtualMachineRuntimeEnvironment',
    'WorkloadVirtualMachineRuntimeEnvironmentDns',
    'WorkloadVirtualMachineRuntimeEnvironmentDnsHostAlias',
    'WorkloadVirtualMachineRuntimeEnvironmentDnsResolverConfig',
    'WorkloadVirtualMachineVolumeMount',
    'WorkloadVolumeClaim',
    'WorkloadVolumeClaimResources',
]

@pulumi.output_type
class NetworkPolicyEgress(dict):
    def __init__(__self__, *,
                 action: str,
                 description: Optional[str] = None,
                 protocol: Optional['outputs.NetworkPolicyEgressProtocol'] = None,
                 to: Optional['outputs.NetworkPolicyEgressTo'] = None):
        pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if to is not None:
            pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def protocol(self) -> Optional['outputs.NetworkPolicyEgressProtocol']:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def to(self) -> Optional['outputs.NetworkPolicyEgressTo']:
        return pulumi.get(self, "to")


@pulumi.output_type
class NetworkPolicyEgressProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tcpUdp":
            suggest = "tcp_udp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyEgressProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyEgressProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyEgressProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ah: Optional['outputs.NetworkPolicyEgressProtocolAh'] = None,
                 esp: Optional['outputs.NetworkPolicyEgressProtocolEsp'] = None,
                 gre: Optional['outputs.NetworkPolicyEgressProtocolGre'] = None,
                 icmp: Optional['outputs.NetworkPolicyEgressProtocolIcmp'] = None,
                 tcp: Optional['outputs.NetworkPolicyEgressProtocolTcp'] = None,
                 tcp_udp: Optional['outputs.NetworkPolicyEgressProtocolTcpUdp'] = None,
                 udp: Optional['outputs.NetworkPolicyEgressProtocolUdp'] = None):
        if ah is not None:
            pulumi.set(__self__, "ah", ah)
        if esp is not None:
            pulumi.set(__self__, "esp", esp)
        if gre is not None:
            pulumi.set(__self__, "gre", gre)
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if tcp_udp is not None:
            pulumi.set(__self__, "tcp_udp", tcp_udp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def ah(self) -> Optional['outputs.NetworkPolicyEgressProtocolAh']:
        return pulumi.get(self, "ah")

    @property
    @pulumi.getter
    def esp(self) -> Optional['outputs.NetworkPolicyEgressProtocolEsp']:
        return pulumi.get(self, "esp")

    @property
    @pulumi.getter
    def gre(self) -> Optional['outputs.NetworkPolicyEgressProtocolGre']:
        return pulumi.get(self, "gre")

    @property
    @pulumi.getter
    def icmp(self) -> Optional['outputs.NetworkPolicyEgressProtocolIcmp']:
        return pulumi.get(self, "icmp")

    @property
    @pulumi.getter
    def tcp(self) -> Optional['outputs.NetworkPolicyEgressProtocolTcp']:
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter(name="tcpUdp")
    def tcp_udp(self) -> Optional['outputs.NetworkPolicyEgressProtocolTcpUdp']:
        return pulumi.get(self, "tcp_udp")

    @property
    @pulumi.getter
    def udp(self) -> Optional['outputs.NetworkPolicyEgressProtocolUdp']:
        return pulumi.get(self, "udp")


@pulumi.output_type
class NetworkPolicyEgressProtocolAh(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class NetworkPolicyEgressProtocolEsp(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class NetworkPolicyEgressProtocolGre(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class NetworkPolicyEgressProtocolIcmp(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class NetworkPolicyEgressProtocolTcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyEgressProtocolTcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyEgressProtocolTcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyEgressProtocolTcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ports: Optional[Sequence[str]] = None,
                 source_ports: Optional[Sequence[str]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_ports")

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class NetworkPolicyEgressProtocolTcpUdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyEgressProtocolTcpUdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyEgressProtocolTcpUdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyEgressProtocolTcpUdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ports: Optional[Sequence[str]] = None,
                 source_ports: Optional[Sequence[str]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_ports")

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class NetworkPolicyEgressProtocolUdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyEgressProtocolUdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyEgressProtocolUdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyEgressProtocolUdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ports: Optional[Sequence[str]] = None,
                 source_ports: Optional[Sequence[str]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_ports")

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class NetworkPolicyEgressTo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceSelectors":
            suggest = "instance_selectors"
        elif key == "ipBlocks":
            suggest = "ip_blocks"
        elif key == "networkSelectors":
            suggest = "network_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyEgressTo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyEgressTo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyEgressTo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_selectors: Optional[Sequence['outputs.NetworkPolicyEgressToInstanceSelector']] = None,
                 ip_blocks: Optional[Sequence['outputs.NetworkPolicyEgressToIpBlock']] = None,
                 network_selectors: Optional[Sequence['outputs.NetworkPolicyEgressToNetworkSelector']] = None):
        if instance_selectors is not None:
            pulumi.set(__self__, "instance_selectors", instance_selectors)
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)
        if network_selectors is not None:
            pulumi.set(__self__, "network_selectors", network_selectors)

    @property
    @pulumi.getter(name="instanceSelectors")
    def instance_selectors(self) -> Optional[Sequence['outputs.NetworkPolicyEgressToInstanceSelector']]:
        return pulumi.get(self, "instance_selectors")

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[Sequence['outputs.NetworkPolicyEgressToIpBlock']]:
        return pulumi.get(self, "ip_blocks")

    @property
    @pulumi.getter(name="networkSelectors")
    def network_selectors(self) -> Optional[Sequence['outputs.NetworkPolicyEgressToNetworkSelector']]:
        return pulumi.get(self, "network_selectors")


@pulumi.output_type
class NetworkPolicyEgressToInstanceSelector(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkPolicyEgressToIpBlock(dict):
    def __init__(__self__, *,
                 cidr: str,
                 excepts: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "cidr", cidr)
        if excepts is not None:
            pulumi.set(__self__, "excepts", excepts)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def excepts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excepts")


@pulumi.output_type
class NetworkPolicyEgressToNetworkSelector(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkPolicyIngress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "from":
            suggest = "from_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyIngress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyIngress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyIngress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 description: Optional[str] = None,
                 from_: Optional['outputs.NetworkPolicyIngressFrom'] = None,
                 protocol: Optional['outputs.NetworkPolicyIngressProtocol'] = None):
        pulumi.set(__self__, "action", action)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional['outputs.NetworkPolicyIngressFrom']:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def protocol(self) -> Optional['outputs.NetworkPolicyIngressProtocol']:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class NetworkPolicyIngressFrom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceSelectors":
            suggest = "instance_selectors"
        elif key == "ipBlocks":
            suggest = "ip_blocks"
        elif key == "networkSelectors":
            suggest = "network_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyIngressFrom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyIngressFrom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyIngressFrom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_selectors: Optional[Sequence['outputs.NetworkPolicyIngressFromInstanceSelector']] = None,
                 ip_blocks: Optional[Sequence['outputs.NetworkPolicyIngressFromIpBlock']] = None,
                 network_selectors: Optional[Sequence['outputs.NetworkPolicyIngressFromNetworkSelector']] = None):
        if instance_selectors is not None:
            pulumi.set(__self__, "instance_selectors", instance_selectors)
        if ip_blocks is not None:
            pulumi.set(__self__, "ip_blocks", ip_blocks)
        if network_selectors is not None:
            pulumi.set(__self__, "network_selectors", network_selectors)

    @property
    @pulumi.getter(name="instanceSelectors")
    def instance_selectors(self) -> Optional[Sequence['outputs.NetworkPolicyIngressFromInstanceSelector']]:
        return pulumi.get(self, "instance_selectors")

    @property
    @pulumi.getter(name="ipBlocks")
    def ip_blocks(self) -> Optional[Sequence['outputs.NetworkPolicyIngressFromIpBlock']]:
        return pulumi.get(self, "ip_blocks")

    @property
    @pulumi.getter(name="networkSelectors")
    def network_selectors(self) -> Optional[Sequence['outputs.NetworkPolicyIngressFromNetworkSelector']]:
        return pulumi.get(self, "network_selectors")


@pulumi.output_type
class NetworkPolicyIngressFromInstanceSelector(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkPolicyIngressFromIpBlock(dict):
    def __init__(__self__, *,
                 cidr: str,
                 excepts: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "cidr", cidr)
        if excepts is not None:
            pulumi.set(__self__, "excepts", excepts)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter
    def excepts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excepts")


@pulumi.output_type
class NetworkPolicyIngressFromNetworkSelector(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkPolicyIngressProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tcpUdp":
            suggest = "tcp_udp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyIngressProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyIngressProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyIngressProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ah: Optional['outputs.NetworkPolicyIngressProtocolAh'] = None,
                 esp: Optional['outputs.NetworkPolicyIngressProtocolEsp'] = None,
                 gre: Optional['outputs.NetworkPolicyIngressProtocolGre'] = None,
                 icmp: Optional['outputs.NetworkPolicyIngressProtocolIcmp'] = None,
                 tcp: Optional['outputs.NetworkPolicyIngressProtocolTcp'] = None,
                 tcp_udp: Optional['outputs.NetworkPolicyIngressProtocolTcpUdp'] = None,
                 udp: Optional['outputs.NetworkPolicyIngressProtocolUdp'] = None):
        if ah is not None:
            pulumi.set(__self__, "ah", ah)
        if esp is not None:
            pulumi.set(__self__, "esp", esp)
        if gre is not None:
            pulumi.set(__self__, "gre", gre)
        if icmp is not None:
            pulumi.set(__self__, "icmp", icmp)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if tcp_udp is not None:
            pulumi.set(__self__, "tcp_udp", tcp_udp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter
    def ah(self) -> Optional['outputs.NetworkPolicyIngressProtocolAh']:
        return pulumi.get(self, "ah")

    @property
    @pulumi.getter
    def esp(self) -> Optional['outputs.NetworkPolicyIngressProtocolEsp']:
        return pulumi.get(self, "esp")

    @property
    @pulumi.getter
    def gre(self) -> Optional['outputs.NetworkPolicyIngressProtocolGre']:
        return pulumi.get(self, "gre")

    @property
    @pulumi.getter
    def icmp(self) -> Optional['outputs.NetworkPolicyIngressProtocolIcmp']:
        return pulumi.get(self, "icmp")

    @property
    @pulumi.getter
    def tcp(self) -> Optional['outputs.NetworkPolicyIngressProtocolTcp']:
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter(name="tcpUdp")
    def tcp_udp(self) -> Optional['outputs.NetworkPolicyIngressProtocolTcpUdp']:
        return pulumi.get(self, "tcp_udp")

    @property
    @pulumi.getter
    def udp(self) -> Optional['outputs.NetworkPolicyIngressProtocolUdp']:
        return pulumi.get(self, "udp")


@pulumi.output_type
class NetworkPolicyIngressProtocolAh(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class NetworkPolicyIngressProtocolEsp(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class NetworkPolicyIngressProtocolGre(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class NetworkPolicyIngressProtocolIcmp(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class NetworkPolicyIngressProtocolTcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyIngressProtocolTcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyIngressProtocolTcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyIngressProtocolTcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ports: Optional[Sequence[str]] = None,
                 source_ports: Optional[Sequence[str]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_ports")

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class NetworkPolicyIngressProtocolTcpUdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyIngressProtocolTcpUdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyIngressProtocolTcpUdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyIngressProtocolTcpUdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ports: Optional[Sequence[str]] = None,
                 source_ports: Optional[Sequence[str]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_ports")

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class NetworkPolicyIngressProtocolUdp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPorts":
            suggest = "destination_ports"
        elif key == "sourcePorts":
            suggest = "source_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkPolicyIngressProtocolUdp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkPolicyIngressProtocolUdp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkPolicyIngressProtocolUdp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ports: Optional[Sequence[str]] = None,
                 source_ports: Optional[Sequence[str]] = None):
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if source_ports is not None:
            pulumi.set(__self__, "source_ports", source_ports)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "destination_ports")

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "source_ports")


@pulumi.output_type
class NetworkPolicyInstanceSelector(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkPolicyNetworkSelector(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class NetworkRouteGatewaySelector(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceSelectors":
            suggest = "interface_selectors"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkRouteGatewaySelector. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkRouteGatewaySelector.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkRouteGatewaySelector.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_selectors: Sequence['outputs.NetworkRouteGatewaySelectorInterfaceSelector']):
        pulumi.set(__self__, "interface_selectors", interface_selectors)

    @property
    @pulumi.getter(name="interfaceSelectors")
    def interface_selectors(self) -> Sequence['outputs.NetworkRouteGatewaySelectorInterfaceSelector']:
        return pulumi.get(self, "interface_selectors")


@pulumi.output_type
class NetworkRouteGatewaySelectorInterfaceSelector(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class WorkloadContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "volumeMounts":
            suggest = "volume_mounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 name: str,
                 resources: 'outputs.WorkloadContainerResources',
                 commands: Optional[Sequence[str]] = None,
                 envs: Optional[Sequence['outputs.WorkloadContainerEnv']] = None,
                 liveness_probe: Optional['outputs.WorkloadContainerLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.WorkloadContainerPort']] = None,
                 readiness_probe: Optional['outputs.WorkloadContainerReadinessProbe'] = None,
                 security_context: Optional['outputs.WorkloadContainerSecurityContext'] = None,
                 volume_mounts: Optional[Sequence['outputs.WorkloadContainerVolumeMount']] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.WorkloadContainerResources':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.WorkloadContainerEnv']]:
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.WorkloadContainerLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.WorkloadContainerPort']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.WorkloadContainerReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.WorkloadContainerSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.WorkloadContainerVolumeMount']]:
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class WorkloadContainerEnv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretValue":
            suggest = "secret_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerEnv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerEnv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerEnv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_value: Optional[str] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[str]:
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkloadContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: int,
                 success_threshold: int,
                 http_get: Optional['outputs.WorkloadContainerLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 tcp_socket: Optional['outputs.WorkloadContainerLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadContainerLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadContainerLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadContainerLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadContainerLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadContainerPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableImplicitNetworkPolicy":
            suggest = "enable_implicit_network_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 port: int,
                 enable_implicit_network_policy: Optional[bool] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if enable_implicit_network_policy is not None:
            pulumi.set(__self__, "enable_implicit_network_policy", enable_implicit_network_policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="enableImplicitNetworkPolicy")
    def enable_implicit_network_policy(self) -> Optional[bool]:
        return pulumi.get(self, "enable_implicit_network_policy")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WorkloadContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: int,
                 success_threshold: int,
                 http_get: Optional['outputs.WorkloadContainerReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 tcp_socket: Optional['outputs.WorkloadContainerReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadContainerReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadContainerReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadContainerReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadContainerReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadContainerResources(dict):
    def __init__(__self__, *,
                 requests: Mapping[str, str]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> Mapping[str, str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class WorkloadContainerRuntimeEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityContext":
            suggest = "security_context"
        elif key == "shareProcessNamespace":
            suggest = "share_process_namespace"
        elif key == "terminationGracePeriodSeconds":
            suggest = "termination_grace_period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerRuntimeEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerRuntimeEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerRuntimeEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns: 'outputs.WorkloadContainerRuntimeEnvironmentDns',
                 security_context: Optional['outputs.WorkloadContainerRuntimeEnvironmentSecurityContext'] = None,
                 share_process_namespace: Optional[bool] = None,
                 termination_grace_period_seconds: Optional[int] = None):
        pulumi.set(__self__, "dns", dns)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if share_process_namespace is not None:
            pulumi.set(__self__, "share_process_namespace", share_process_namespace)
        if termination_grace_period_seconds is not None:
            pulumi.set(__self__, "termination_grace_period_seconds", termination_grace_period_seconds)

    @property
    @pulumi.getter
    def dns(self) -> 'outputs.WorkloadContainerRuntimeEnvironmentDns':
        return pulumi.get(self, "dns")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.WorkloadContainerRuntimeEnvironmentSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="shareProcessNamespace")
    def share_process_namespace(self) -> Optional[bool]:
        return pulumi.get(self, "share_process_namespace")

    @property
    @pulumi.getter(name="terminationGracePeriodSeconds")
    def termination_grace_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "termination_grace_period_seconds")


@pulumi.output_type
class WorkloadContainerRuntimeEnvironmentDns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostAliases":
            suggest = "host_aliases"
        elif key == "resolverConfigs":
            suggest = "resolver_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerRuntimeEnvironmentDns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerRuntimeEnvironmentDns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerRuntimeEnvironmentDns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_aliases: Optional[Sequence['outputs.WorkloadContainerRuntimeEnvironmentDnsHostAlias']] = None,
                 resolver_configs: Optional[Sequence['outputs.WorkloadContainerRuntimeEnvironmentDnsResolverConfig']] = None):
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if resolver_configs is not None:
            pulumi.set(__self__, "resolver_configs", resolver_configs)

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[Sequence['outputs.WorkloadContainerRuntimeEnvironmentDnsHostAlias']]:
        return pulumi.get(self, "host_aliases")

    @property
    @pulumi.getter(name="resolverConfigs")
    def resolver_configs(self) -> Optional[Sequence['outputs.WorkloadContainerRuntimeEnvironmentDnsResolverConfig']]:
        return pulumi.get(self, "resolver_configs")


@pulumi.output_type
class WorkloadContainerRuntimeEnvironmentDnsHostAlias(dict):
    def __init__(__self__, *,
                 address: str,
                 hostnames: Sequence[str]):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "hostnames", hostnames)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def hostnames(self) -> Sequence[str]:
        return pulumi.get(self, "hostnames")


@pulumi.output_type
class WorkloadContainerRuntimeEnvironmentDnsResolverConfig(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None,
                 options: Optional[Mapping[str, Any]] = None,
                 searches: Optional[Sequence[str]] = None):
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "searches")


@pulumi.output_type
class WorkloadContainerRuntimeEnvironmentSecurityContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"
        elif key == "supplementalGroups":
            suggest = "supplemental_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerRuntimeEnvironmentSecurityContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerRuntimeEnvironmentSecurityContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerRuntimeEnvironmentSecurityContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_as_group: Optional[str] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[str] = None,
                 supplemental_groups: Optional[Sequence[str]] = None,
                 sysctl: Optional[Mapping[str, str]] = None):
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)
        if supplemental_groups is not None:
            pulumi.set(__self__, "supplemental_groups", supplemental_groups)
        if sysctl is not None:
            pulumi.set(__self__, "sysctl", sysctl)

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[str]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user")

    @property
    @pulumi.getter(name="supplementalGroups")
    def supplemental_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supplemental_groups")

    @property
    @pulumi.getter
    def sysctl(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "sysctl")


@pulumi.output_type
class WorkloadContainerSecurityContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowPrivilegeEscalation":
            suggest = "allow_privilege_escalation"
        elif key == "readOnlyRootFilesystem":
            suggest = "read_only_root_filesystem"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerSecurityContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerSecurityContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerSecurityContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.WorkloadContainerSecurityContextCapabilities'] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[str] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[str] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.WorkloadContainerSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[str]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class WorkloadContainerSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 adds: Optional[Sequence[str]] = None,
                 drops: Optional[Sequence[str]] = None):
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @property
    @pulumi.getter
    def adds(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "adds")

    @property
    @pulumi.getter
    def drops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class WorkloadContainerVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadContainerVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadContainerVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadContainerVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: str,
                 slug: str):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class WorkloadImagePullCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dockerRegistry":
            suggest = "docker_registry"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadImagePullCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadImagePullCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadImagePullCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 docker_registry: 'outputs.WorkloadImagePullCredentialDockerRegistry'):
        pulumi.set(__self__, "docker_registry", docker_registry)

    @property
    @pulumi.getter(name="dockerRegistry")
    def docker_registry(self) -> 'outputs.WorkloadImagePullCredentialDockerRegistry':
        return pulumi.get(self, "docker_registry")


@pulumi.output_type
class WorkloadImagePullCredentialDockerRegistry(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str,
                 email: Optional[str] = None,
                 server: Optional[str] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if server is not None:
            pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        return pulumi.get(self, "server")


@pulumi.output_type
class WorkloadInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIpAddress":
            suggest = "external_ip_address"
        elif key == "externalIpv6Address":
            suggest = "external_ipv6_address"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "virtualMachine":
            suggest = "virtual_machine"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 containers: Optional[Sequence['outputs.WorkloadInstanceContainer']] = None,
                 external_ip_address: Optional[str] = None,
                 external_ipv6_address: Optional[str] = None,
                 ip_address: Optional[str] = None,
                 ipv6_address: Optional[str] = None,
                 location: Optional['outputs.WorkloadInstanceLocation'] = None,
                 message: Optional[str] = None,
                 metadata: Optional['outputs.WorkloadInstanceMetadata'] = None,
                 network_interfaces: Optional[Sequence['outputs.WorkloadInstanceNetworkInterface']] = None,
                 phase: Optional[str] = None,
                 reason: Optional[str] = None,
                 virtual_machine: Optional['outputs.WorkloadInstanceVirtualMachine'] = None):
        pulumi.set(__self__, "name", name)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if external_ip_address is not None:
            pulumi.set(__self__, "external_ip_address", external_ip_address)
        if external_ipv6_address is not None:
            pulumi.set(__self__, "external_ipv6_address", external_ipv6_address)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if virtual_machine is not None:
            pulumi.set(__self__, "virtual_machine", virtual_machine)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def containers(self) -> Optional[Sequence['outputs.WorkloadInstanceContainer']]:
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter(name="externalIpAddress")
    def external_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "external_ip_address")

    @property
    @pulumi.getter(name="externalIpv6Address")
    def external_ipv6_address(self) -> Optional[str]:
        return pulumi.get(self, "external_ipv6_address")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.WorkloadInstanceLocation']:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.WorkloadInstanceMetadata']:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.WorkloadInstanceNetworkInterface']]:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter
    def phase(self) -> Optional[str]:
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="virtualMachine")
    def virtual_machine(self) -> Optional['outputs.WorkloadInstanceVirtualMachine']:
        return pulumi.get(self, "virtual_machine")


@pulumi.output_type
class WorkloadInstanceContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "securityContext":
            suggest = "security_context"
        elif key == "volumeMounts":
            suggest = "volume_mounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 name: str,
                 resources: 'outputs.WorkloadInstanceContainerResources',
                 commands: Optional[Sequence[str]] = None,
                 envs: Optional[Sequence['outputs.WorkloadInstanceContainerEnv']] = None,
                 liveness_probe: Optional['outputs.WorkloadInstanceContainerLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.WorkloadInstanceContainerPort']] = None,
                 readiness_probe: Optional['outputs.WorkloadInstanceContainerReadinessProbe'] = None,
                 security_context: Optional['outputs.WorkloadInstanceContainerSecurityContext'] = None,
                 volume_mounts: Optional[Sequence['outputs.WorkloadInstanceContainerVolumeMount']] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if security_context is not None:
            pulumi.set(__self__, "security_context", security_context)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.WorkloadInstanceContainerResources':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.WorkloadInstanceContainerEnv']]:
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.WorkloadInstanceContainerLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.WorkloadInstanceContainerPort']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.WorkloadInstanceContainerReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter(name="securityContext")
    def security_context(self) -> Optional['outputs.WorkloadInstanceContainerSecurityContext']:
        return pulumi.get(self, "security_context")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.WorkloadInstanceContainerVolumeMount']]:
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class WorkloadInstanceContainerEnv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretValue":
            suggest = "secret_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainerEnv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainerEnv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainerEnv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 secret_value: Optional[str] = None,
                 value: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        if secret_value is not None:
            pulumi.set(__self__, "secret_value", secret_value)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="secretValue")
    def secret_value(self) -> Optional[str]:
        return pulumi.get(self, "secret_value")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkloadInstanceContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: int,
                 success_threshold: int,
                 http_get: Optional['outputs.WorkloadInstanceContainerLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 tcp_socket: Optional['outputs.WorkloadInstanceContainerLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadInstanceContainerLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadInstanceContainerLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadInstanceContainerLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainerLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainerLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainerLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadInstanceContainerLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadInstanceContainerPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableImplicitNetworkPolicy":
            suggest = "enable_implicit_network_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainerPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainerPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainerPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 port: int,
                 enable_implicit_network_policy: Optional[bool] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if enable_implicit_network_policy is not None:
            pulumi.set(__self__, "enable_implicit_network_policy", enable_implicit_network_policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="enableImplicitNetworkPolicy")
    def enable_implicit_network_policy(self) -> Optional[bool]:
        return pulumi.get(self, "enable_implicit_network_policy")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WorkloadInstanceContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: int,
                 success_threshold: int,
                 http_get: Optional['outputs.WorkloadInstanceContainerReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 tcp_socket: Optional['outputs.WorkloadInstanceContainerReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadInstanceContainerReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadInstanceContainerReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadInstanceContainerReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainerReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainerReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainerReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadInstanceContainerReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadInstanceContainerResources(dict):
    def __init__(__self__, *,
                 requests: Mapping[str, str]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> Mapping[str, str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class WorkloadInstanceContainerSecurityContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowPrivilegeEscalation":
            suggest = "allow_privilege_escalation"
        elif key == "readOnlyRootFilesystem":
            suggest = "read_only_root_filesystem"
        elif key == "runAsGroup":
            suggest = "run_as_group"
        elif key == "runAsNonRoot":
            suggest = "run_as_non_root"
        elif key == "runAsUser":
            suggest = "run_as_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainerSecurityContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainerSecurityContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainerSecurityContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_privilege_escalation: Optional[bool] = None,
                 capabilities: Optional['outputs.WorkloadInstanceContainerSecurityContextCapabilities'] = None,
                 read_only_root_filesystem: Optional[bool] = None,
                 run_as_group: Optional[str] = None,
                 run_as_non_root: Optional[bool] = None,
                 run_as_user: Optional[str] = None):
        if allow_privilege_escalation is not None:
            pulumi.set(__self__, "allow_privilege_escalation", allow_privilege_escalation)
        if capabilities is not None:
            pulumi.set(__self__, "capabilities", capabilities)
        if read_only_root_filesystem is not None:
            pulumi.set(__self__, "read_only_root_filesystem", read_only_root_filesystem)
        if run_as_group is not None:
            pulumi.set(__self__, "run_as_group", run_as_group)
        if run_as_non_root is not None:
            pulumi.set(__self__, "run_as_non_root", run_as_non_root)
        if run_as_user is not None:
            pulumi.set(__self__, "run_as_user", run_as_user)

    @property
    @pulumi.getter(name="allowPrivilegeEscalation")
    def allow_privilege_escalation(self) -> Optional[bool]:
        return pulumi.get(self, "allow_privilege_escalation")

    @property
    @pulumi.getter
    def capabilities(self) -> Optional['outputs.WorkloadInstanceContainerSecurityContextCapabilities']:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="readOnlyRootFilesystem")
    def read_only_root_filesystem(self) -> Optional[bool]:
        return pulumi.get(self, "read_only_root_filesystem")

    @property
    @pulumi.getter(name="runAsGroup")
    def run_as_group(self) -> Optional[str]:
        return pulumi.get(self, "run_as_group")

    @property
    @pulumi.getter(name="runAsNonRoot")
    def run_as_non_root(self) -> Optional[bool]:
        return pulumi.get(self, "run_as_non_root")

    @property
    @pulumi.getter(name="runAsUser")
    def run_as_user(self) -> Optional[str]:
        return pulumi.get(self, "run_as_user")


@pulumi.output_type
class WorkloadInstanceContainerSecurityContextCapabilities(dict):
    def __init__(__self__, *,
                 adds: Optional[Sequence[str]] = None,
                 drops: Optional[Sequence[str]] = None):
        if adds is not None:
            pulumi.set(__self__, "adds", adds)
        if drops is not None:
            pulumi.set(__self__, "drops", drops)

    @property
    @pulumi.getter
    def adds(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "adds")

    @property
    @pulumi.getter
    def drops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "drops")


@pulumi.output_type
class WorkloadInstanceContainerVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceContainerVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceContainerVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceContainerVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: str,
                 slug: str):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class WorkloadInstanceLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cityCode":
            suggest = "city_code"
        elif key == "continentCode":
            suggest = "continent_code"
        elif key == "countryCode":
            suggest = "country_code"
        elif key == "regionCode":
            suggest = "region_code"
        elif key == "subdivisionCode":
            suggest = "subdivision_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 city: Optional[str] = None,
                 city_code: Optional[str] = None,
                 continent: Optional[str] = None,
                 continent_code: Optional[str] = None,
                 country: Optional[str] = None,
                 country_code: Optional[str] = None,
                 latitude: Optional[float] = None,
                 longitude: Optional[float] = None,
                 name: Optional[str] = None,
                 region: Optional[str] = None,
                 region_code: Optional[str] = None,
                 subdivision: Optional[str] = None,
                 subdivision_code: Optional[str] = None):
        if city is not None:
            pulumi.set(__self__, "city", city)
        if city_code is not None:
            pulumi.set(__self__, "city_code", city_code)
        if continent is not None:
            pulumi.set(__self__, "continent", continent)
        if continent_code is not None:
            pulumi.set(__self__, "continent_code", continent_code)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if region_code is not None:
            pulumi.set(__self__, "region_code", region_code)
        if subdivision is not None:
            pulumi.set(__self__, "subdivision", subdivision)
        if subdivision_code is not None:
            pulumi.set(__self__, "subdivision_code", subdivision_code)

    @property
    @pulumi.getter
    def city(self) -> Optional[str]:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cityCode")
    def city_code(self) -> Optional[str]:
        return pulumi.get(self, "city_code")

    @property
    @pulumi.getter
    def continent(self) -> Optional[str]:
        return pulumi.get(self, "continent")

    @property
    @pulumi.getter(name="continentCode")
    def continent_code(self) -> Optional[str]:
        return pulumi.get(self, "continent_code")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[float]:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[float]:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> Optional[str]:
        return pulumi.get(self, "region_code")

    @property
    @pulumi.getter
    def subdivision(self) -> Optional[str]:
        return pulumi.get(self, "subdivision")

    @property
    @pulumi.getter(name="subdivisionCode")
    def subdivision_code(self) -> Optional[str]:
        return pulumi.get(self, "subdivision_code")


@pulumi.output_type
class WorkloadInstanceMetadata(dict):
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, Any]] = None,
                 labels: Optional[Mapping[str, Any]] = None):
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "labels")


@pulumi.output_type
class WorkloadInstanceNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6Gateway":
            suggest = "ipv6_gateway"
        elif key == "ipAddressAliases":
            suggest = "ip_address_aliases"
        elif key == "ipv6AddressAliases":
            suggest = "ipv6_address_aliases"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: str,
                 ip_address: str,
                 ipv6_address: str,
                 ipv6_gateway: str,
                 network: str,
                 ip_address_aliases: Optional[Sequence[str]] = None,
                 ipv6_address_aliases: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "ipv6_gateway", ipv6_gateway)
        pulumi.set(__self__, "network", network)
        if ip_address_aliases is not None:
            pulumi.set(__self__, "ip_address_aliases", ip_address_aliases)
        if ipv6_address_aliases is not None:
            pulumi.set(__self__, "ipv6_address_aliases", ipv6_address_aliases)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6Gateway")
    def ipv6_gateway(self) -> str:
        return pulumi.get(self, "ipv6_gateway")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="ipAddressAliases")
    def ip_address_aliases(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_address_aliases")

    @property
    @pulumi.getter(name="ipv6AddressAliases")
    def ipv6_address_aliases(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ipv6_address_aliases")


@pulumi.output_type
class WorkloadInstanceVirtualMachine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "userData":
            suggest = "user_data"
        elif key == "volumeMounts":
            suggest = "volume_mounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceVirtualMachine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceVirtualMachine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceVirtualMachine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 name: str,
                 resources: 'outputs.WorkloadInstanceVirtualMachineResources',
                 liveness_probe: Optional['outputs.WorkloadInstanceVirtualMachineLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.WorkloadInstanceVirtualMachinePort']] = None,
                 readiness_probe: Optional['outputs.WorkloadInstanceVirtualMachineReadinessProbe'] = None,
                 user_data: Optional[str] = None,
                 volume_mounts: Optional[Sequence['outputs.WorkloadInstanceVirtualMachineVolumeMount']] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.WorkloadInstanceVirtualMachineResources':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.WorkloadInstanceVirtualMachineLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.WorkloadInstanceVirtualMachinePort']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.WorkloadInstanceVirtualMachineReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.WorkloadInstanceVirtualMachineVolumeMount']]:
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class WorkloadInstanceVirtualMachineLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceVirtualMachineLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceVirtualMachineLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceVirtualMachineLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: int,
                 success_threshold: int,
                 http_get: Optional['outputs.WorkloadInstanceVirtualMachineLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 tcp_socket: Optional['outputs.WorkloadInstanceVirtualMachineLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadInstanceVirtualMachineLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadInstanceVirtualMachineLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadInstanceVirtualMachineLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceVirtualMachineLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceVirtualMachineLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceVirtualMachineLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadInstanceVirtualMachineLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadInstanceVirtualMachinePort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableImplicitNetworkPolicy":
            suggest = "enable_implicit_network_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceVirtualMachinePort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceVirtualMachinePort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceVirtualMachinePort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 port: int,
                 enable_implicit_network_policy: Optional[bool] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if enable_implicit_network_policy is not None:
            pulumi.set(__self__, "enable_implicit_network_policy", enable_implicit_network_policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="enableImplicitNetworkPolicy")
    def enable_implicit_network_policy(self) -> Optional[bool]:
        return pulumi.get(self, "enable_implicit_network_policy")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WorkloadInstanceVirtualMachineReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceVirtualMachineReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceVirtualMachineReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceVirtualMachineReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: int,
                 success_threshold: int,
                 http_get: Optional['outputs.WorkloadInstanceVirtualMachineReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 tcp_socket: Optional['outputs.WorkloadInstanceVirtualMachineReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadInstanceVirtualMachineReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadInstanceVirtualMachineReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadInstanceVirtualMachineReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceVirtualMachineReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceVirtualMachineReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceVirtualMachineReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadInstanceVirtualMachineReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadInstanceVirtualMachineResources(dict):
    def __init__(__self__, *,
                 requests: Mapping[str, str]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> Mapping[str, str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class WorkloadInstanceVirtualMachineVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadInstanceVirtualMachineVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadInstanceVirtualMachineVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadInstanceVirtualMachineVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: str,
                 slug: str):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class WorkloadNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableOneToOneNat":
            suggest = "enable_one_to_one_nat"
        elif key == "ipFamilies":
            suggest = "ip_families"
        elif key == "ipv6Subnet":
            suggest = "ipv6_subnet"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network: str,
                 enable_one_to_one_nat: Optional[bool] = None,
                 ip_families: Optional[Sequence[str]] = None,
                 ipv6_subnet: Optional[str] = None,
                 subnet: Optional[str] = None):
        pulumi.set(__self__, "network", network)
        if enable_one_to_one_nat is not None:
            pulumi.set(__self__, "enable_one_to_one_nat", enable_one_to_one_nat)
        if ip_families is not None:
            pulumi.set(__self__, "ip_families", ip_families)
        if ipv6_subnet is not None:
            pulumi.set(__self__, "ipv6_subnet", ipv6_subnet)
        if subnet is not None:
            pulumi.set(__self__, "subnet", subnet)

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="enableOneToOneNat")
    def enable_one_to_one_nat(self) -> Optional[bool]:
        return pulumi.get(self, "enable_one_to_one_nat")

    @property
    @pulumi.getter(name="ipFamilies")
    def ip_families(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_families")

    @property
    @pulumi.getter(name="ipv6Subnet")
    def ipv6_subnet(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_subnet")

    @property
    @pulumi.getter
    def subnet(self) -> Optional[str]:
        return pulumi.get(self, "subnet")


@pulumi.output_type
class WorkloadTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minReplicas":
            suggest = "min_replicas"
        elif key == "deploymentScope":
            suggest = "deployment_scope"
        elif key == "maxReplicas":
            suggest = "max_replicas"
        elif key == "scaleSettings":
            suggest = "scale_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_replicas: int,
                 name: str,
                 selectors: Sequence['outputs.WorkloadTargetSelector'],
                 deployment_scope: Optional[str] = None,
                 max_replicas: Optional[int] = None,
                 scale_settings: Optional['outputs.WorkloadTargetScaleSettings'] = None):
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "selectors", selectors)
        if deployment_scope is not None:
            pulumi.set(__self__, "deployment_scope", deployment_scope)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if scale_settings is not None:
            pulumi.set(__self__, "scale_settings", scale_settings)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> int:
        return pulumi.get(self, "min_replicas")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def selectors(self) -> Sequence['outputs.WorkloadTargetSelector']:
        return pulumi.get(self, "selectors")

    @property
    @pulumi.getter(name="deploymentScope")
    def deployment_scope(self) -> Optional[str]:
        return pulumi.get(self, "deployment_scope")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="scaleSettings")
    def scale_settings(self) -> Optional['outputs.WorkloadTargetScaleSettings']:
        return pulumi.get(self, "scale_settings")


@pulumi.output_type
class WorkloadTargetScaleSettings(dict):
    def __init__(__self__, *,
                 metrics: Sequence['outputs.WorkloadTargetScaleSettingsMetric']):
        pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.WorkloadTargetScaleSettingsMetric']:
        return pulumi.get(self, "metrics")


@pulumi.output_type
class WorkloadTargetScaleSettingsMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "averageUtilization":
            suggest = "average_utilization"
        elif key == "averageValue":
            suggest = "average_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadTargetScaleSettingsMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadTargetScaleSettingsMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadTargetScaleSettingsMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric: str,
                 average_utilization: Optional[int] = None,
                 average_value: Optional[str] = None):
        pulumi.set(__self__, "metric", metric)
        if average_utilization is not None:
            pulumi.set(__self__, "average_utilization", average_utilization)
        if average_value is not None:
            pulumi.set(__self__, "average_value", average_value)

    @property
    @pulumi.getter
    def metric(self) -> str:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter(name="averageUtilization")
    def average_utilization(self) -> Optional[int]:
        return pulumi.get(self, "average_utilization")

    @property
    @pulumi.getter(name="averageValue")
    def average_value(self) -> Optional[str]:
        return pulumi.get(self, "average_value")


@pulumi.output_type
class WorkloadTargetSelector(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class WorkloadVirtualMachine(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "userData":
            suggest = "user_data"
        elif key == "volumeMounts":
            suggest = "volume_mounts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVirtualMachine. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVirtualMachine.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVirtualMachine.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 name: str,
                 resources: 'outputs.WorkloadVirtualMachineResources',
                 liveness_probe: Optional['outputs.WorkloadVirtualMachineLivenessProbe'] = None,
                 ports: Optional[Sequence['outputs.WorkloadVirtualMachinePort']] = None,
                 readiness_probe: Optional['outputs.WorkloadVirtualMachineReadinessProbe'] = None,
                 user_data: Optional[str] = None,
                 volume_mounts: Optional[Sequence['outputs.WorkloadVirtualMachineVolumeMount']] = None):
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)

    @property
    @pulumi.getter
    def image(self) -> str:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.WorkloadVirtualMachineResources':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.WorkloadVirtualMachineLivenessProbe']:
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence['outputs.WorkloadVirtualMachinePort']]:
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.WorkloadVirtualMachineReadinessProbe']:
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.WorkloadVirtualMachineVolumeMount']]:
        return pulumi.get(self, "volume_mounts")


@pulumi.output_type
class WorkloadVirtualMachineLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVirtualMachineLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVirtualMachineLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVirtualMachineLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: int,
                 success_threshold: int,
                 http_get: Optional['outputs.WorkloadVirtualMachineLivenessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 tcp_socket: Optional['outputs.WorkloadVirtualMachineLivenessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadVirtualMachineLivenessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadVirtualMachineLivenessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadVirtualMachineLivenessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVirtualMachineLivenessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVirtualMachineLivenessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVirtualMachineLivenessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadVirtualMachineLivenessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadVirtualMachinePort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableImplicitNetworkPolicy":
            suggest = "enable_implicit_network_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVirtualMachinePort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVirtualMachinePort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVirtualMachinePort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 port: int,
                 enable_implicit_network_policy: Optional[bool] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if enable_implicit_network_policy is not None:
            pulumi.set(__self__, "enable_implicit_network_policy", enable_implicit_network_policy)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="enableImplicitNetworkPolicy")
    def enable_implicit_network_policy(self) -> Optional[bool]:
        return pulumi.get(self, "enable_implicit_network_policy")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class WorkloadVirtualMachineReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "httpGet":
            suggest = "http_get"
        elif key == "initialDelaySeconds":
            suggest = "initial_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "tcpSocket":
            suggest = "tcp_socket"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVirtualMachineReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVirtualMachineReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVirtualMachineReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: int,
                 success_threshold: int,
                 http_get: Optional['outputs.WorkloadVirtualMachineReadinessProbeHttpGet'] = None,
                 initial_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 tcp_socket: Optional['outputs.WorkloadVirtualMachineReadinessProbeTcpSocket'] = None,
                 timeout_seconds: Optional[int] = None):
        pulumi.set(__self__, "failure_threshold", failure_threshold)
        pulumi.set(__self__, "success_threshold", success_threshold)
        if http_get is not None:
            pulumi.set(__self__, "http_get", http_get)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if tcp_socket is not None:
            pulumi.set(__self__, "tcp_socket", tcp_socket)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> int:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> int:
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="httpGet")
    def http_get(self) -> Optional['outputs.WorkloadVirtualMachineReadinessProbeHttpGet']:
        return pulumi.get(self, "http_get")

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "initial_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="tcpSocket")
    def tcp_socket(self) -> Optional['outputs.WorkloadVirtualMachineReadinessProbeTcpSocket']:
        return pulumi.get(self, "tcp_socket")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class WorkloadVirtualMachineReadinessProbeHttpGet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpHeaders":
            suggest = "http_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVirtualMachineReadinessProbeHttpGet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVirtualMachineReadinessProbeHttpGet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVirtualMachineReadinessProbeHttpGet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 http_headers: Optional[Mapping[str, str]] = None,
                 path: Optional[str] = None,
                 scheme: Optional[str] = None):
        pulumi.set(__self__, "port", port)
        if http_headers is not None:
            pulumi.set(__self__, "http_headers", http_headers)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="httpHeaders")
    def http_headers(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "http_headers")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        return pulumi.get(self, "scheme")


@pulumi.output_type
class WorkloadVirtualMachineReadinessProbeTcpSocket(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class WorkloadVirtualMachineResources(dict):
    def __init__(__self__, *,
                 requests: Mapping[str, str]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> Mapping[str, str]:
        return pulumi.get(self, "requests")


@pulumi.output_type
class WorkloadVirtualMachineRuntimeEnvironment(dict):
    def __init__(__self__, *,
                 dns: 'outputs.WorkloadVirtualMachineRuntimeEnvironmentDns'):
        pulumi.set(__self__, "dns", dns)

    @property
    @pulumi.getter
    def dns(self) -> 'outputs.WorkloadVirtualMachineRuntimeEnvironmentDns':
        return pulumi.get(self, "dns")


@pulumi.output_type
class WorkloadVirtualMachineRuntimeEnvironmentDns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostAliases":
            suggest = "host_aliases"
        elif key == "resolverConfigs":
            suggest = "resolver_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVirtualMachineRuntimeEnvironmentDns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVirtualMachineRuntimeEnvironmentDns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVirtualMachineRuntimeEnvironmentDns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_aliases: Optional[Sequence['outputs.WorkloadVirtualMachineRuntimeEnvironmentDnsHostAlias']] = None,
                 resolver_configs: Optional[Sequence['outputs.WorkloadVirtualMachineRuntimeEnvironmentDnsResolverConfig']] = None):
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)
        if resolver_configs is not None:
            pulumi.set(__self__, "resolver_configs", resolver_configs)

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[Sequence['outputs.WorkloadVirtualMachineRuntimeEnvironmentDnsHostAlias']]:
        return pulumi.get(self, "host_aliases")

    @property
    @pulumi.getter(name="resolverConfigs")
    def resolver_configs(self) -> Optional[Sequence['outputs.WorkloadVirtualMachineRuntimeEnvironmentDnsResolverConfig']]:
        return pulumi.get(self, "resolver_configs")


@pulumi.output_type
class WorkloadVirtualMachineRuntimeEnvironmentDnsHostAlias(dict):
    def __init__(__self__, *,
                 address: str,
                 hostnames: Sequence[str]):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "hostnames", hostnames)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def hostnames(self) -> Sequence[str]:
        return pulumi.get(self, "hostnames")


@pulumi.output_type
class WorkloadVirtualMachineRuntimeEnvironmentDnsResolverConfig(dict):
    def __init__(__self__, *,
                 nameservers: Optional[Sequence[str]] = None,
                 options: Optional[Mapping[str, Any]] = None,
                 searches: Optional[Sequence[str]] = None):
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if searches is not None:
            pulumi.set(__self__, "searches", searches)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nameservers")

    @property
    @pulumi.getter
    def options(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def searches(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "searches")


@pulumi.output_type
class WorkloadVirtualMachineVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPath":
            suggest = "mount_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVirtualMachineVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVirtualMachineVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVirtualMachineVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mount_path: str,
                 slug: str):
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> str:
        return pulumi.get(self, "mount_path")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class WorkloadVolumeClaim(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkloadVolumeClaim. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkloadVolumeClaim.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkloadVolumeClaim.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 resources: 'outputs.WorkloadVolumeClaimResources',
                 slug: Optional[str] = None,
                 storage_class: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.WorkloadVolumeClaimResources':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[str]:
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class WorkloadVolumeClaimResources(dict):
    def __init__(__self__, *,
                 requests: Mapping[str, str]):
        pulumi.set(__self__, "requests", requests)

    @property
    @pulumi.getter
    def requests(self) -> Mapping[str, str]:
        return pulumi.get(self, "requests")



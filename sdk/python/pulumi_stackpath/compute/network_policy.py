# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkPolicyArgs', 'NetworkPolicy']

@pulumi.input_type
class NetworkPolicyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 policy_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 priority: pulumi.Input[int],
                 slug: pulumi.Input[str],
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egresses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressArgs']]]] = None,
                 ingresses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressArgs']]]] = None,
                 instance_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyInstanceSelectorArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 network_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyNetworkSelectorArgs']]]] = None):
        """
        The set of arguments for constructing a NetworkPolicy resource.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_types", policy_types)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "slug", slug)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egresses is not None:
            pulumi.set(__self__, "egresses", egresses)
        if ingresses is not None:
            pulumi.set(__self__, "ingresses", ingresses)
        if instance_selectors is not None:
            pulumi.set(__self__, "instance_selectors", instance_selectors)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if network_selectors is not None:
            pulumi.set(__self__, "network_selectors", network_selectors)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyTypes")
    def policy_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "policy_types")

    @policy_types.setter
    def policy_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "policy_types", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def egresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressArgs']]]]:
        return pulumi.get(self, "egresses")

    @egresses.setter
    def egresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressArgs']]]]):
        pulumi.set(self, "egresses", value)

    @property
    @pulumi.getter
    def ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressArgs']]]]:
        return pulumi.get(self, "ingresses")

    @ingresses.setter
    def ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressArgs']]]]):
        pulumi.set(self, "ingresses", value)

    @property
    @pulumi.getter(name="instanceSelectors")
    def instance_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyInstanceSelectorArgs']]]]:
        return pulumi.get(self, "instance_selectors")

    @instance_selectors.setter
    def instance_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyInstanceSelectorArgs']]]]):
        pulumi.set(self, "instance_selectors", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="networkSelectors")
    def network_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyNetworkSelectorArgs']]]]:
        return pulumi.get(self, "network_selectors")

    @network_selectors.setter
    def network_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyNetworkSelectorArgs']]]]):
        pulumi.set(self, "network_selectors", value)


@pulumi.input_type
class _NetworkPolicyState:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egresses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressArgs']]]] = None,
                 ingresses: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressArgs']]]] = None,
                 instance_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyInstanceSelectorArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyNetworkSelectorArgs']]]] = None,
                 policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering NetworkPolicy resources.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if egresses is not None:
            pulumi.set(__self__, "egresses", egresses)
        if ingresses is not None:
            pulumi.set(__self__, "ingresses", ingresses)
        if instance_selectors is not None:
            pulumi.set(__self__, "instance_selectors", instance_selectors)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_selectors is not None:
            pulumi.set(__self__, "network_selectors", network_selectors)
        if policy_types is not None:
            pulumi.set(__self__, "policy_types", policy_types)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def egresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressArgs']]]]:
        return pulumi.get(self, "egresses")

    @egresses.setter
    def egresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyEgressArgs']]]]):
        pulumi.set(self, "egresses", value)

    @property
    @pulumi.getter
    def ingresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressArgs']]]]:
        return pulumi.get(self, "ingresses")

    @ingresses.setter
    def ingresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyIngressArgs']]]]):
        pulumi.set(self, "ingresses", value)

    @property
    @pulumi.getter(name="instanceSelectors")
    def instance_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyInstanceSelectorArgs']]]]:
        return pulumi.get(self, "instance_selectors")

    @instance_selectors.setter
    def instance_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyInstanceSelectorArgs']]]]):
        pulumi.set(self, "instance_selectors", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkSelectors")
    def network_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyNetworkSelectorArgs']]]]:
        return pulumi.get(self, "network_selectors")

    @network_selectors.setter
    def network_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkPolicyNetworkSelectorArgs']]]]):
        pulumi.set(self, "network_selectors", value)

    @property
    @pulumi.getter(name="policyTypes")
    def policy_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_types")

    @policy_types.setter
    def policy_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_types", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class NetworkPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyEgressArgs']]]]] = None,
                 ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyIngressArgs']]]]] = None,
                 instance_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyInstanceSelectorArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyNetworkSelectorArgs']]]]] = None,
                 policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a NetworkPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NetworkPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NetworkPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 egresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyEgressArgs']]]]] = None,
                 ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyIngressArgs']]]]] = None,
                 instance_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyInstanceSelectorArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyNetworkSelectorArgs']]]]] = None,
                 policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkPolicyArgs.__new__(NetworkPolicyArgs)

            __props__.__dict__["annotations"] = annotations
            __props__.__dict__["description"] = description
            __props__.__dict__["egresses"] = egresses
            __props__.__dict__["ingresses"] = ingresses
            __props__.__dict__["instance_selectors"] = instance_selectors
            __props__.__dict__["labels"] = labels
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["network_selectors"] = network_selectors
            if policy_types is None and not opts.urn:
                raise TypeError("Missing required property 'policy_types'")
            __props__.__dict__["policy_types"] = policy_types
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["version"] = None
        super(NetworkPolicy, __self__).__init__(
            'stackpath:compute/networkPolicy:NetworkPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            egresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyEgressArgs']]]]] = None,
            ingresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyIngressArgs']]]]] = None,
            instance_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyInstanceSelectorArgs']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_selectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkPolicyNetworkSelectorArgs']]]]] = None,
            policy_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'NetworkPolicy':
        """
        Get an existing NetworkPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkPolicyState.__new__(_NetworkPolicyState)

        __props__.__dict__["annotations"] = annotations
        __props__.__dict__["description"] = description
        __props__.__dict__["egresses"] = egresses
        __props__.__dict__["ingresses"] = ingresses
        __props__.__dict__["instance_selectors"] = instance_selectors
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["network_selectors"] = network_selectors
        __props__.__dict__["policy_types"] = policy_types
        __props__.__dict__["priority"] = priority
        __props__.__dict__["slug"] = slug
        __props__.__dict__["version"] = version
        return NetworkPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def egresses(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkPolicyEgress']]]:
        return pulumi.get(self, "egresses")

    @property
    @pulumi.getter
    def ingresses(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkPolicyIngress']]]:
        return pulumi.get(self, "ingresses")

    @property
    @pulumi.getter(name="instanceSelectors")
    def instance_selectors(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkPolicyInstanceSelector']]]:
        return pulumi.get(self, "instance_selectors")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkSelectors")
    def network_selectors(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkPolicyNetworkSelector']]]:
        return pulumi.get(self, "network_selectors")

    @property
    @pulumi.getter(name="policyTypes")
    def policy_types(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "policy_types")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "version")


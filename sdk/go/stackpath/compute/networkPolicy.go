// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/stackpath/pulumi-stackpath/sdk/go/stackpath/internal"
)

type NetworkPolicy struct {
	pulumi.CustomResourceState

	Annotations       pulumi.StringMapOutput                   `pulumi:"annotations"`
	Description       pulumi.StringPtrOutput                   `pulumi:"description"`
	Egresses          NetworkPolicyEgressArrayOutput           `pulumi:"egresses"`
	Ingresses         NetworkPolicyIngressArrayOutput          `pulumi:"ingresses"`
	InstanceSelectors NetworkPolicyInstanceSelectorArrayOutput `pulumi:"instanceSelectors"`
	Labels            pulumi.StringMapOutput                   `pulumi:"labels"`
	Name              pulumi.StringOutput                      `pulumi:"name"`
	NetworkSelectors  NetworkPolicyNetworkSelectorArrayOutput  `pulumi:"networkSelectors"`
	PolicyTypes       pulumi.StringArrayOutput                 `pulumi:"policyTypes"`
	Priority          pulumi.IntOutput                         `pulumi:"priority"`
	Slug              pulumi.StringOutput                      `pulumi:"slug"`
	Version           pulumi.StringOutput                      `pulumi:"version"`
}

// NewNetworkPolicy registers a new resource with the given unique name, arguments, and options.
func NewNetworkPolicy(ctx *pulumi.Context,
	name string, args *NetworkPolicyArgs, opts ...pulumi.ResourceOption) (*NetworkPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyTypes == nil {
		return nil, errors.New("invalid value for required argument 'PolicyTypes'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkPolicy
	err := ctx.RegisterResource("stackpath:compute/networkPolicy:NetworkPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPolicy gets an existing NetworkPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPolicyState, opts ...pulumi.ResourceOption) (*NetworkPolicy, error) {
	var resource NetworkPolicy
	err := ctx.ReadResource("stackpath:compute/networkPolicy:NetworkPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPolicy resources.
type networkPolicyState struct {
	Annotations       map[string]string               `pulumi:"annotations"`
	Description       *string                         `pulumi:"description"`
	Egresses          []NetworkPolicyEgress           `pulumi:"egresses"`
	Ingresses         []NetworkPolicyIngress          `pulumi:"ingresses"`
	InstanceSelectors []NetworkPolicyInstanceSelector `pulumi:"instanceSelectors"`
	Labels            map[string]string               `pulumi:"labels"`
	Name              *string                         `pulumi:"name"`
	NetworkSelectors  []NetworkPolicyNetworkSelector  `pulumi:"networkSelectors"`
	PolicyTypes       []string                        `pulumi:"policyTypes"`
	Priority          *int                            `pulumi:"priority"`
	Slug              *string                         `pulumi:"slug"`
	Version           *string                         `pulumi:"version"`
}

type NetworkPolicyState struct {
	Annotations       pulumi.StringMapInput
	Description       pulumi.StringPtrInput
	Egresses          NetworkPolicyEgressArrayInput
	Ingresses         NetworkPolicyIngressArrayInput
	InstanceSelectors NetworkPolicyInstanceSelectorArrayInput
	Labels            pulumi.StringMapInput
	Name              pulumi.StringPtrInput
	NetworkSelectors  NetworkPolicyNetworkSelectorArrayInput
	PolicyTypes       pulumi.StringArrayInput
	Priority          pulumi.IntPtrInput
	Slug              pulumi.StringPtrInput
	Version           pulumi.StringPtrInput
}

func (NetworkPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPolicyState)(nil)).Elem()
}

type networkPolicyArgs struct {
	Annotations       map[string]string               `pulumi:"annotations"`
	Description       *string                         `pulumi:"description"`
	Egresses          []NetworkPolicyEgress           `pulumi:"egresses"`
	Ingresses         []NetworkPolicyIngress          `pulumi:"ingresses"`
	InstanceSelectors []NetworkPolicyInstanceSelector `pulumi:"instanceSelectors"`
	Labels            map[string]string               `pulumi:"labels"`
	Name              *string                         `pulumi:"name"`
	NetworkSelectors  []NetworkPolicyNetworkSelector  `pulumi:"networkSelectors"`
	PolicyTypes       []string                        `pulumi:"policyTypes"`
	Priority          int                             `pulumi:"priority"`
	Slug              string                          `pulumi:"slug"`
}

// The set of arguments for constructing a NetworkPolicy resource.
type NetworkPolicyArgs struct {
	Annotations       pulumi.StringMapInput
	Description       pulumi.StringPtrInput
	Egresses          NetworkPolicyEgressArrayInput
	Ingresses         NetworkPolicyIngressArrayInput
	InstanceSelectors NetworkPolicyInstanceSelectorArrayInput
	Labels            pulumi.StringMapInput
	Name              pulumi.StringPtrInput
	NetworkSelectors  NetworkPolicyNetworkSelectorArrayInput
	PolicyTypes       pulumi.StringArrayInput
	Priority          pulumi.IntInput
	Slug              pulumi.StringInput
}

func (NetworkPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPolicyArgs)(nil)).Elem()
}

type NetworkPolicyInput interface {
	pulumi.Input

	ToNetworkPolicyOutput() NetworkPolicyOutput
	ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput
}

func (*NetworkPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (i *NetworkPolicy) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return i.ToNetworkPolicyOutputWithContext(context.Background())
}

func (i *NetworkPolicy) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyOutput)
}

// NetworkPolicyArrayInput is an input type that accepts NetworkPolicyArray and NetworkPolicyArrayOutput values.
// You can construct a concrete instance of `NetworkPolicyArrayInput` via:
//
//	NetworkPolicyArray{ NetworkPolicyArgs{...} }
type NetworkPolicyArrayInput interface {
	pulumi.Input

	ToNetworkPolicyArrayOutput() NetworkPolicyArrayOutput
	ToNetworkPolicyArrayOutputWithContext(context.Context) NetworkPolicyArrayOutput
}

type NetworkPolicyArray []NetworkPolicyInput

func (NetworkPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPolicy)(nil)).Elem()
}

func (i NetworkPolicyArray) ToNetworkPolicyArrayOutput() NetworkPolicyArrayOutput {
	return i.ToNetworkPolicyArrayOutputWithContext(context.Background())
}

func (i NetworkPolicyArray) ToNetworkPolicyArrayOutputWithContext(ctx context.Context) NetworkPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyArrayOutput)
}

// NetworkPolicyMapInput is an input type that accepts NetworkPolicyMap and NetworkPolicyMapOutput values.
// You can construct a concrete instance of `NetworkPolicyMapInput` via:
//
//	NetworkPolicyMap{ "key": NetworkPolicyArgs{...} }
type NetworkPolicyMapInput interface {
	pulumi.Input

	ToNetworkPolicyMapOutput() NetworkPolicyMapOutput
	ToNetworkPolicyMapOutputWithContext(context.Context) NetworkPolicyMapOutput
}

type NetworkPolicyMap map[string]NetworkPolicyInput

func (NetworkPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPolicy)(nil)).Elem()
}

func (i NetworkPolicyMap) ToNetworkPolicyMapOutput() NetworkPolicyMapOutput {
	return i.ToNetworkPolicyMapOutputWithContext(context.Background())
}

func (i NetworkPolicyMap) ToNetworkPolicyMapOutputWithContext(ctx context.Context) NetworkPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPolicyMapOutput)
}

type NetworkPolicyOutput struct{ *pulumi.OutputState }

func (NetworkPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutput() NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) ToNetworkPolicyOutputWithContext(ctx context.Context) NetworkPolicyOutput {
	return o
}

func (o NetworkPolicyOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o NetworkPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o NetworkPolicyOutput) Egresses() NetworkPolicyEgressArrayOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicyEgressArrayOutput { return v.Egresses }).(NetworkPolicyEgressArrayOutput)
}

func (o NetworkPolicyOutput) Ingresses() NetworkPolicyIngressArrayOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicyIngressArrayOutput { return v.Ingresses }).(NetworkPolicyIngressArrayOutput)
}

func (o NetworkPolicyOutput) InstanceSelectors() NetworkPolicyInstanceSelectorArrayOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicyInstanceSelectorArrayOutput { return v.InstanceSelectors }).(NetworkPolicyInstanceSelectorArrayOutput)
}

func (o NetworkPolicyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o NetworkPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NetworkPolicyOutput) NetworkSelectors() NetworkPolicyNetworkSelectorArrayOutput {
	return o.ApplyT(func(v *NetworkPolicy) NetworkPolicyNetworkSelectorArrayOutput { return v.NetworkSelectors }).(NetworkPolicyNetworkSelectorArrayOutput)
}

func (o NetworkPolicyOutput) PolicyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringArrayOutput { return v.PolicyTypes }).(pulumi.StringArrayOutput)
}

func (o NetworkPolicyOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o NetworkPolicyOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o NetworkPolicyOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPolicy) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type NetworkPolicyArrayOutput struct{ *pulumi.OutputState }

func (NetworkPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyArrayOutput) ToNetworkPolicyArrayOutput() NetworkPolicyArrayOutput {
	return o
}

func (o NetworkPolicyArrayOutput) ToNetworkPolicyArrayOutputWithContext(ctx context.Context) NetworkPolicyArrayOutput {
	return o
}

func (o NetworkPolicyArrayOutput) Index(i pulumi.IntInput) NetworkPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkPolicy {
		return vs[0].([]*NetworkPolicy)[vs[1].(int)]
	}).(NetworkPolicyOutput)
}

type NetworkPolicyMapOutput struct{ *pulumi.OutputState }

func (NetworkPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPolicy)(nil)).Elem()
}

func (o NetworkPolicyMapOutput) ToNetworkPolicyMapOutput() NetworkPolicyMapOutput {
	return o
}

func (o NetworkPolicyMapOutput) ToNetworkPolicyMapOutputWithContext(ctx context.Context) NetworkPolicyMapOutput {
	return o
}

func (o NetworkPolicyMapOutput) MapIndex(k pulumi.StringInput) NetworkPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkPolicy {
		return vs[0].(map[string]*NetworkPolicy)[vs[1].(string)]
	}).(NetworkPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyInput)(nil)).Elem(), &NetworkPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyArrayInput)(nil)).Elem(), NetworkPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPolicyMapInput)(nil)).Elem(), NetworkPolicyMap{})
	pulumi.RegisterOutputType(NetworkPolicyOutput{})
	pulumi.RegisterOutputType(NetworkPolicyArrayOutput{})
	pulumi.RegisterOutputType(NetworkPolicyMapOutput{})
}

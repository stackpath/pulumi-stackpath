// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Stackpath.Stackpath.Compute.Outputs
{

    [OutputType]
    public sealed class WorkloadInstance
    {
        public readonly ImmutableArray<Outputs.WorkloadInstanceContainer> Containers;
        public readonly string? ExternalIpAddress;
        public readonly string? ExternalIpv6Address;
        public readonly string? IpAddress;
        public readonly string? Ipv6Address;
        public readonly Outputs.WorkloadInstanceLocation? Location;
        public readonly string? Message;
        public readonly Outputs.WorkloadInstanceMetadata? Metadata;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.WorkloadInstanceNetworkInterface> NetworkInterfaces;
        public readonly string? Phase;
        public readonly string? Reason;
        public readonly Outputs.WorkloadInstanceVirtualMachine? VirtualMachine;

        [OutputConstructor]
        private WorkloadInstance(
            ImmutableArray<Outputs.WorkloadInstanceContainer> containers,

            string? externalIpAddress,

            string? externalIpv6Address,

            string? ipAddress,

            string? ipv6Address,

            Outputs.WorkloadInstanceLocation? location,

            string? message,

            Outputs.WorkloadInstanceMetadata? metadata,

            string name,

            ImmutableArray<Outputs.WorkloadInstanceNetworkInterface> networkInterfaces,

            string? phase,

            string? reason,

            Outputs.WorkloadInstanceVirtualMachine? virtualMachine)
        {
            Containers = containers;
            ExternalIpAddress = externalIpAddress;
            ExternalIpv6Address = externalIpv6Address;
            IpAddress = ipAddress;
            Ipv6Address = ipv6Address;
            Location = location;
            Message = message;
            Metadata = metadata;
            Name = name;
            NetworkInterfaces = networkInterfaces;
            Phase = phase;
            Reason = reason;
            VirtualMachine = virtualMachine;
        }
    }
}
